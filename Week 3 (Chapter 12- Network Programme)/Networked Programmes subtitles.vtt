WEBVTT

1
00:00:08.620 --> 00:00:11.949
So now we're going to start playing
with taking our Python applications and

2
00:00:11.949 --> 00:00:13.519
changing the source of their data.

3
00:00:13.519 --> 00:00:16.398
Up till now we've been reading files.

4
00:00:16.398 --> 00:00:19.180
The mailbox file, the Romeo file.

5
00:00:19.180 --> 00:00:22.460
But often a lot of what
you need to do is look

6
00:00:22.460 --> 00:00:24.010
at data that's coming
in from the Internet.

7
00:00:24.010 --> 00:00:28.291
And so we're going to look at how we write
Python programs to talk to the Internet.

8
00:00:28.291 --> 00:00:33.179
And what we're going to do is we're going to
play with the request-response cycle

9
00:00:33.179 --> 00:00:34.746
that your browser does.

10
00:00:34.746 --> 00:00:38.935
And so, your browser, when you're clicking
on pages or watching this, is talking

11
00:00:38.935 --> 00:00:42.947
across the Internet to servers, and we're
going to take a look at the protocols and

12
00:00:42.947 --> 00:00:45.148
all the kinds of things
that are happening.

13
00:00:45.148 --> 00:00:48.368
Your browser displays web pages and
runs JavaScript,

14
00:00:48.368 --> 00:00:50.674
and does this, that, and the other thing.

15
00:00:50.674 --> 00:00:54.808
And then it sends commands across
the Internet to these servers,

16
00:00:54.808 --> 00:00:59.706
and the servers run server languages
like PHP or MySQL, and send stuff back.

17
00:00:59.706 --> 00:01:04.629
And so we're going to spend our time in this
section sort of learning about this area.

18
00:01:04.629 --> 00:01:07.333
What's going on back and
forth, and back and forth,

19
00:01:07.333 --> 00:01:09.810
as your web browser's
talking to the Internet.

20
00:01:09.810 --> 00:01:13.860
And then what we're going to do, is we're
gonna write a Python program over here.

21
00:01:14.870 --> 00:01:18.457
And our Python program is going to talk
the same protocol as your web browser, and

22
00:01:18.457 --> 00:01:20.462
we're going to do this
to read information so

23
00:01:20.462 --> 00:01:22.761
that we can read information
across the Internet.

24
00:01:22.761 --> 00:01:26.731
Now I'm going to talk really quickly
through some of what the Internet is.

25
00:01:26.731 --> 00:01:27.938
That is a whole class.

26
00:01:27.938 --> 00:01:31.980
I wrote a whole book called Introduction
to Networking that talks all about these

27
00:01:31.980 --> 00:01:34.953
kind of things, and
if you need more detail then go ahead and

28
00:01:34.953 --> 00:01:36.158
get ahold of that book.

29
00:01:36.158 --> 00:01:38.457
There's also a free copy
online of this book.

30
00:01:38.457 --> 00:01:42.248
And I also teach another Coursera class,
Internet History, Technology, and

31
00:01:42.248 --> 00:01:45.260
Security, that goes into much
more detail than this lecture.

32
00:01:45.260 --> 00:01:48.601
And so if you're interested in that,
you can stop and

33
00:01:48.601 --> 00:01:52.551
go take that class right now in
its entirety and then come back.

34
00:01:52.551 --> 00:01:56.270
But now this is the short version
the too long, don't read.

35
00:01:56.270 --> 00:01:59.900
This is a picture of
the network architecture,

36
00:01:59.900 --> 00:02:04.340
the TCP/IP Transport Control Protocol,
and it's this layered architecture.

37
00:02:04.340 --> 00:02:08.841
And these two ends, this is your computer
and this is the server's computer.

38
00:02:08.841 --> 00:02:13.007
And the data sort of works its way through
various elements of your computer,

39
00:02:13.007 --> 00:02:17.368
walks across the network, and then takes
multiple hops, actually many hops,

40
00:02:17.368 --> 00:02:21.495
as it goes across, and then finally
makes it into the destination computer.

41
00:02:21.495 --> 00:02:24.254
And then the data that you're
getting from that computer sort of

42
00:02:24.254 --> 00:02:26.139
walks its way back through all these hops.

43
00:02:26.139 --> 00:02:28.623
Walk back, back, back, back,
and then the application.

44
00:02:28.623 --> 00:02:33.170
And so this is your web browser, and
this is the web server over here.

45
00:02:33.170 --> 00:02:36.750
And again I teach class
upon class about this, and

46
00:02:36.750 --> 00:02:38.160
you can go take all those classes.

47
00:02:39.830 --> 00:02:42.090
And so, there's lots of detail
that we're not going to cover.

48
00:02:42.090 --> 00:02:45.870
There is a layer that is
the first end-to-end layer.

49
00:02:45.870 --> 00:02:50.360
We call it the Transport Layer,
where your web browser on this end and

50
00:02:50.360 --> 00:02:54.890
the web server on this end,
in effect makes a connection and

51
00:02:55.960 --> 00:02:58.840
doesn't worry about all this detail,
kind of ignores all this detail.

52
00:02:58.840 --> 00:03:00.810
Says, I'm going to talk to this end point.

53
00:03:00.810 --> 00:03:02.960
And then gets its data back and
then the data comes back.

54
00:03:02.960 --> 00:03:03.820
And so

55
00:03:03.820 --> 00:03:07.610
the first thing we're going to talk about
is this peer-to-peer Transport Layer.

56
00:03:07.610 --> 00:03:09.570
The way that, effectively,

57
00:03:09.570 --> 00:03:14.390
computer applications make telephone
calls from one application to the other.

58
00:03:14.390 --> 00:03:16.500
And so there's a lot of cool stuff
that happens, and like I said,

59
00:03:16.500 --> 00:03:20.060
I wrote a whole book on this stuff and
you're welcome to go look at all that.

60
00:03:20.060 --> 00:03:25.230
But first we're going to really focus
on how this works inside of Python.

61
00:03:25.230 --> 00:03:29.770
So a socket can be best
thought of as a connection

62
00:03:29.770 --> 00:03:32.060
that we don't worry too much about.

63
00:03:32.060 --> 00:03:35.800
When you make a phone call and you
start talking to somebody on the phone,

64
00:03:35.800 --> 00:03:39.680
you don't worry about the magic that gets
this phone talking to the cell tower, or

65
00:03:39.680 --> 00:03:40.760
anything like that.

66
00:03:40.760 --> 00:03:43.610
You just say,
I need to connect to a person,

67
00:03:43.610 --> 00:03:46.320
and then once the connection's
made you do your talking.

68
00:03:46.320 --> 00:03:49.590
And applications inside of
computers do the same thing.

69
00:03:49.590 --> 00:03:53.300
And we call this abstraction,
this concept, a socket.

70
00:03:53.300 --> 00:03:57.000
A socket is two computer applications or

71
00:03:57.000 --> 00:04:00.600
computer processes that
are talking across a network.

72
00:04:00.600 --> 00:04:02.390
And they sort of have this
one end point.

73
00:04:02.390 --> 00:04:04.720
One that puts stuff in and
pulls stuff back out.

74
00:04:04.720 --> 00:04:08.040
And then there's all this magic
that happens in the middle, and

75
00:04:08.040 --> 00:04:09.680
it's really complex.

76
00:04:09.680 --> 00:04:12.570
And then the other's getting stuff
out and putting stuff back in.

77
00:04:12.570 --> 00:04:16.250
And so the socket is sort
of like this abstraction

78
00:04:16.250 --> 00:04:20.400
that gives us like a phone
call between two applications.

79
00:04:20.400 --> 00:04:23.593
In the beginning this will
be like a web server.

80
00:04:23.593 --> 00:04:27.146
And this is the code that you're
going to write, this is our code.

81
00:04:27.146 --> 00:04:29.375
But socket is the way that it talks.

82
00:04:29.375 --> 00:04:32.509
Now we're doing something similar
when we talk about files.

83
00:04:32.509 --> 00:04:35.589
So your code runs here, and
if you remember we had a file handle and

84
00:04:35.589 --> 00:04:37.942
there's a disk drive out
here that has data on it.

85
00:04:37.942 --> 00:04:41.007
And we'd use an open call and
we'd read stuff back and forth.

86
00:04:41.007 --> 00:04:45.858
So that was our way of saying a file
handle is a way to look at a file and

87
00:04:45.858 --> 00:04:47.253
get stuff from it.

88
00:04:47.253 --> 00:04:51.073
A socket is a way to look at a connection
to another process on the end of it and

89
00:04:51.073 --> 00:04:52.129
then get data back.

90
00:04:52.129 --> 00:04:56.476
So both of these are like portholes
that allow us to look out of our

91
00:04:56.476 --> 00:05:01.400
application to somewhere else in
the world and exchange data with that.

92
00:05:03.590 --> 00:05:07.650
And so, when you're making a connection,

93
00:05:07.650 --> 00:05:11.390
different applications, like there's
applications like email and the Web.

94
00:05:11.390 --> 00:05:14.230
And the Web is the application
we're going to play with,

95
00:05:14.230 --> 00:05:16.870
but these applications can
all run on the same server.

96
00:05:16.870 --> 00:05:21.450
And so these applications have what's
called a port number, and each port

97
00:05:21.450 --> 00:05:24.290
is a way to say, you know what, I want to
talk to the web server on this host, or

98
00:05:24.290 --> 00:05:26.620
I want to talk to the email
server on this host,

99
00:05:26.620 --> 00:05:29.857
or I want to talk to the network
news server on this host, etc., etc.

100
00:05:29.857 --> 00:05:33.525
And so these are like extensions
within phone numbers.

101
00:05:33.525 --> 00:05:37.472
And so if you have one big server,
and it has the ability to do email,

102
00:05:37.472 --> 00:05:39.841
there's an email server application.

103
00:05:39.841 --> 00:05:43.619
This side here is the server now and

104
00:05:43.619 --> 00:05:47.666
this is our client, like a browser.

105
00:05:47.666 --> 00:05:49.790
Well, this is not a browser,
this is a browser, that's a browser.

106
00:05:49.790 --> 00:05:53.140
So the client is the thing
initiating the connection,

107
00:05:53.140 --> 00:05:54.880
the server's the thing reacting to it.

108
00:05:56.150 --> 00:05:58.180
And the way they find each other
is through these port numbers.

109
00:05:58.180 --> 00:06:00.410
So there would be a mail application,

110
00:06:00.410 --> 00:06:04.690
an application to do log in,
a web server, or a personal mailbox.

111
00:06:04.690 --> 00:06:09.610
And these things connect themselves to
various ports, and say I will listen for

112
00:06:09.610 --> 00:06:11.240
connections to come in.

113
00:06:11.240 --> 00:06:13.280
And then when your web
browser starts up and

114
00:06:13.280 --> 00:06:17.900
it wants to make a connection to the web
server at University of Michigan,

115
00:06:17.900 --> 00:06:22.510
it makes a connection to port 80, and
port 80 is then routed to the web server.

116
00:06:22.510 --> 00:06:27.090
The web server reads data somewhere and
then gives us this stuff back, okay?

117
00:06:27.090 --> 00:06:31.230
And so there is this thing called the IP
address, which is like the phone number

118
00:06:31.230 --> 00:06:36.230
of the destination computer, and it's
equivalent to the domain name address.

119
00:06:36.230 --> 00:06:38.430
Remember, there's a whole class
that explains this if you.

120
00:06:39.460 --> 00:06:42.400
And it turns out that this isn't
all that essential, [LAUGH],

121
00:06:42.400 --> 00:06:43.380
once we start programming.

122
00:06:43.380 --> 00:06:46.190
I just kind of want to give you
a sense of what's going on.

123
00:06:46.190 --> 00:06:49.860
And so there is a domain name address
that turns into an IP address

124
00:06:49.860 --> 00:06:51.900
that's the real address of the computer.

125
00:06:51.900 --> 00:06:55.920
And then within that there's like this
extension that says I'm going to talk

126
00:06:55.920 --> 00:06:57.100
to the web server.

127
00:06:57.100 --> 00:07:01.340
And you could, using different numbers,
port 80 turns out to be the one we'll use

128
00:07:01.340 --> 00:07:03.790
the most, and it's the way that
you talk to the web server.

129
00:07:03.790 --> 00:07:06.390
So you talk to a host on the Internet, and

130
00:07:06.390 --> 00:07:09.970
then talk within that host to
a particular piece of software.

131
00:07:09.970 --> 00:07:15.300
Okay, so some of the common TCP ports,
HTTP, which is the web server,

132
00:07:15.300 --> 00:07:21.150
the secure web server's port 443,
mail's on 25, secure login is on 22.

133
00:07:21.150 --> 00:07:24.590
And so every time someone builds
a new application protocol,

134
00:07:24.590 --> 00:07:26.950
they come up with a new port for it.

135
00:07:26.950 --> 00:07:30.827
And then all the clients that want to
talk to that protocol know what port to

136
00:07:30.827 --> 00:07:31.344
talk to.

137
00:07:31.344 --> 00:07:33.619
Sometimes you'll use a web browser, and

138
00:07:33.619 --> 00:07:36.414
you will see a colon after
the end of the host name and

139
00:07:36.414 --> 00:07:41.096
that's what's happening when a web server
is running on a port other than port 80.

140
00:07:41.096 --> 00:07:44.794
So this happens to be a development
situation where I'm actually running on

141
00:07:44.794 --> 00:07:45.438
localhost.

142
00:07:45.438 --> 00:07:49.357
Which is if I was doing software web
development on my computer I would talk

143
00:07:49.357 --> 00:07:52.914
to localhost which is talking
to myself and then on port 8085.

144
00:07:52.914 --> 00:07:55.399
It just means that it's
a port other than port 80.

145
00:07:55.399 --> 00:07:59.537
So these are the normal ports,
like 80's the normal web port, but

146
00:07:59.537 --> 00:08:01.691
it doesn't have to be port 80.

147
00:08:01.691 --> 00:08:08.856
Okay, with all that, that's a lot of

148
00:08:08.856 --> 00:08:13.393
blah, blah, blah, blah, blah.

149
00:08:13.393 --> 00:08:16.230
Now we're going to talk about
how it happens in Python.

150
00:08:17.270 --> 00:08:20.300
And the beauty of this is
there is a really nice library

151
00:08:20.300 --> 00:08:22.950
in Python called socket library.

152
00:08:22.950 --> 00:08:24.640
We import a socket.

153
00:08:24.640 --> 00:08:26.070
So we say, import socket.

154
00:08:26.070 --> 00:08:29.530
That makes available to us
a whole bunch of library code

155
00:08:29.530 --> 00:08:32.450
that allows us to make sockets.

156
00:08:32.450 --> 00:08:35.520
And then, this is kind of like fopen.

157
00:08:35.520 --> 00:08:38.600
It's like open,
when we're doing file handles.

158
00:08:38.600 --> 00:08:41.530
If you think about our application
as having these portholes that

159
00:08:41.530 --> 00:08:45.340
allow us to talk to disk drives or
allow us to talk to the network.

160
00:08:45.340 --> 00:08:49.810
This is our way of opening
a porthole out through the network.

161
00:08:49.810 --> 00:08:51.600
And so we say socket.socket.

162
00:08:51.600 --> 00:08:52.940
It's a little bit of a weird syntax.

163
00:08:52.940 --> 00:08:58.303
This is the library and
this is the method within the library.

164
00:08:58.303 --> 00:09:03.065
So that says make a socket which basically
says, open me a porthole outside of my

165
00:09:03.065 --> 00:09:07.846
computer. And these next two parameters,
you'll probably never change them,

166
00:09:07.846 --> 00:09:10.524
but what they really say is, this says

167
00:09:10.524 --> 00:09:14.882
I'm going to make an Internet socket and
it's a stream socket.

168
00:09:14.882 --> 00:09:18.264
A stream socket means that
I'm just going to send data, and

169
00:09:18.264 --> 00:09:21.940
I'm going to get back the data and
just keep track of the data.

170
00:09:21.940 --> 00:09:23.333
Give it back to me in order.

171
00:09:23.333 --> 00:09:26.956
There are ways to use it at a lower level
where you're not getting it back in order,

172
00:09:26.956 --> 00:09:29.742
but these two things,
you just are going to put those things in.

173
00:09:29.742 --> 00:09:31.808
Now this actually has not
connected the socket.

174
00:09:31.808 --> 00:09:33.130
So we have our application.

175
00:09:33.130 --> 00:09:37.210
The socket effectively opens
a porthole to the outside world, and

176
00:09:37.210 --> 00:09:39.740
there is nothing connected
to the other side.

177
00:09:39.740 --> 00:09:42.120
And we get back this variable, mysock.

178
00:09:42.120 --> 00:09:43.650
Kind of like file open.

179
00:09:43.650 --> 00:09:45.550
It's almost like you say
I'm going to open a file but

180
00:09:45.550 --> 00:09:48.300
I don't want to tell you what
the name of the file is until later.

181
00:09:48.300 --> 00:09:49.540
But here is where we do.

182
00:09:49.540 --> 00:09:53.064
When we take this thing we get back
from socket, and it says please connect.

183
00:09:53.064 --> 00:09:57.904
Please establish
a connection between me and

184
00:09:57.904 --> 00:10:04.790
go across the Internet and
find the host www.py4inf.com.

185
00:10:04.790 --> 00:10:05.812
That's a host.

186
00:10:05.812 --> 00:10:07.710
And then go to port 80 on that.

187
00:10:07.710 --> 00:10:09.760
So this second thing is the port.

188
00:10:09.760 --> 00:10:12.290
So we're saying, so we start the socket.

189
00:10:12.290 --> 00:10:15.210
And then we effectively say, dear socket,

190
00:10:15.210 --> 00:10:20.220
I want the other end of you to be this
server with that address over there.

191
00:10:20.220 --> 00:10:24.810
And so at that point,
if there is a web server connected,

192
00:10:24.810 --> 00:10:27.290
then we can actually send data
back and forth.

193
00:10:27.290 --> 00:10:32.130
So that is the number of lines to
establish a connection between our running

194
00:10:32.130 --> 00:10:37.480
Python program and a server on
an application running on the far end.

195
00:10:37.480 --> 00:10:39.820
You can't just connect to anywhere or
anything.

196
00:10:39.820 --> 00:10:44.610
There has to be running software
waiting for your connection to show up.

197
00:10:44.610 --> 00:10:47.138
But that's the only three lines of Python.

198
00:10:47.138 --> 00:10:51.910
And so it's a good example of how

199
00:10:51.910 --> 00:10:57.410
something extremely complex, that took
40 years to develop, the Internet, and

200
00:10:57.410 --> 00:11:02.160
now in Python we do a single
import statement of import socket.

201
00:11:02.160 --> 00:11:04.910
And then magically we
can code over top of it,

202
00:11:04.910 --> 00:11:07.660
without even knowing any of
the details whatsoever.

203
00:11:07.660 --> 00:11:12.690
And of course that's what this xkcd of
import antigravity is talking about.

204
00:11:13.810 --> 00:11:17.020
So, the next thing I want to
do is talk about moving from

205
00:11:17.020 --> 00:11:21.240
making a socket connection to
actually solving a problem.

206
00:11:21.240 --> 00:11:25.940
So sockets are like making a phone call,
and applications are what you say and

207
00:11:25.940 --> 00:11:28.120
expect to hear on those phone calls.