WEBVTT

1
00:00:08.363 --> 00:00:11.400
So we just got done doing
something almost magical.

2
00:00:11.400 --> 00:00:16.465
We wrote a Python program
that talked to Google and

3
00:00:16.465 --> 00:00:24.555
used the Google geolocation search engine
to look up a user-entered bit of data

4
00:00:24.555 --> 00:00:27.911
and get back all kinds of information
like the real address of the place and

5
00:00:27.911 --> 00:00:31.377
perhaps if there was a business there
we would find this, and you're like,

6
00:00:31.377 --> 00:00:33.180
whoa, that's pretty cool.

7
00:00:33.180 --> 00:00:37.450
Well, Google doesn't
just let you have access.

8
00:00:37.450 --> 00:00:41.263
What we did was free,
but these APIs, the data,

9
00:00:41.263 --> 00:00:45.458
the compute servers and
all the debugging are not free.

10
00:00:45.458 --> 00:00:49.214
I mean, Google's spent a lot of money to
make sure that that data really worked,

11
00:00:49.214 --> 00:00:51.830
and we use it every day in
Google Maps, right?

12
00:00:51.830 --> 00:00:53.320
And they make some money
off of Google Maps.

13
00:00:53.320 --> 00:00:57.840
But they don't want you to be
able to use their intelligence

14
00:00:57.840 --> 00:01:02.325
to make your own own competitor,
and so these are rate limited.

15
00:01:02.325 --> 00:01:04.710
So, if you take a look at Google,

16
00:01:04.710 --> 00:01:09.324
you will see that you cannot do an
infinite number of these things.

17
00:01:09.324 --> 00:01:12.335
Or, in other situations,
you have to have a key and

18
00:01:12.335 --> 00:01:14.725
you might even have to charge for usage.

19
00:01:14.725 --> 00:01:19.056
So if you take a look at some more detail,
you will see that this geocoding API that

20
00:01:19.056 --> 00:01:22.446
we just used means you can
only do 2500 requests per day.

21
00:01:22.446 --> 00:01:26.940
If you want to make a business you can
pay for a higher limit, for example.

22
00:01:26.940 --> 00:01:29.580
And you can read right there,
they're there to abuse or repurposing

23
00:01:29.580 --> 00:01:32.590
and, you know, they might change it.

24
00:01:32.590 --> 00:01:35.912
So always, when you're working with an API,
figure out what the rules are.

25
00:01:35.912 --> 00:01:39.040
It turns out, we're going to use this
API later in the course, and

26
00:01:39.040 --> 00:01:42.380
we're going to have to use a database
to deal with the fact that

27
00:01:42.380 --> 00:01:45.380
if we were really going to use this
seriously, we could only do 2500 and

28
00:01:45.380 --> 00:01:49.040
if we had 10,000 of these things
it would take you four days.

29
00:01:49.040 --> 00:01:54.010
But you've got to run a program that
starts and stops on one day then waits.

30
00:01:54.010 --> 00:01:56.330
Starts and stops the next day then waits.

31
00:01:56.330 --> 00:01:57.250
And on and on and on.

32
00:01:57.250 --> 00:02:00.040
So, that's the Google geocoding API.

33
00:02:00.040 --> 00:02:02.900
I like that because it's rate limited.

34
00:02:02.900 --> 00:02:04.580
And it doesn't have a password.

35
00:02:04.580 --> 00:02:07.800
So now what we're going to do
is we're going ro use the Twitter API.

36
00:02:07.800 --> 00:02:11.630
So I started with the Google API, because
that did not require authentication.

37
00:02:11.630 --> 00:02:14.030
But the Twitter API does
require authentication.

38
00:02:14.030 --> 00:02:16.730
Now I've given you sample
code that does this.

39
00:02:16.730 --> 00:02:18.090
Please don't sort of abuse Twitter.

40
00:02:18.090 --> 00:02:20.160
Don't get yourself kicked off on Twitter.

41
00:02:20.160 --> 00:02:22.270
When you're running these applications,

42
00:02:22.270 --> 00:02:25.120
make sure that you print
everything through a loop.

43
00:02:25.120 --> 00:02:27.730
And hit Ctrl-C or blow it up or whatever.

44
00:02:27.730 --> 00:02:30.129
So, don't get yourself in
trouble using the Twitter API.

45
00:02:30.129 --> 00:02:32.540
I'm not going to give you
any Twitter assignments.

46
00:02:32.540 --> 00:02:34.850
I just want to sort of
show you how this works.

47
00:02:34.850 --> 00:02:40.140
So, what happens with Twitter is that
you must run this API as yourself.

48
00:02:40.140 --> 00:02:43.240
So, normally you could log into Twitter and
you can use it on the Web and

49
00:02:43.240 --> 00:02:44.570
it knows who you are.

50
00:02:44.570 --> 00:02:45.600
But when you're using this API,

51
00:02:45.600 --> 00:02:52.120
you've got to hand some information to
the application to pretend to be you.

52
00:02:52.120 --> 00:02:55.510
And in Twitter they use
a technology called OAuth.

53
00:02:55.510 --> 00:02:57.810
And they give you what
are called access tokens.

54
00:02:57.810 --> 00:03:02.190
And what you do is you use these tokens
to generate signatures that you send and

55
00:03:02.190 --> 00:03:05.200
then Twitter checks the signature and
knows it's you.

56
00:03:05.200 --> 00:03:08.727
So Twitter has a rate limiting,
but unlike Google's rate limiting,

57
00:03:08.727 --> 00:03:12.391
which kind of is based on your address,
or who knows what it's based on,

58
00:03:12.391 --> 00:03:15.809
Twitter's rate limiting says
you, no matter what,

59
00:03:15.809 --> 00:03:20.700
can do sort of 25 of these things a day
or 2500 of these things a day.

60
00:03:20.700 --> 00:03:23.480
So you have to go into Twitter,
if you have a Twitter account.

61
00:03:23.480 --> 00:03:25.660
And you go into access tokens and

62
00:03:25.660 --> 00:03:29.050
you basically are going to
create a new access token.

63
00:03:29.050 --> 00:03:31.870
And so you have to authorize
an application.

64
00:03:31.870 --> 00:03:33.570
And so you say,
I'd like to add an application.

65
00:03:33.570 --> 00:03:34.730
I'd like to give it permissions.

66
00:03:34.730 --> 00:03:36.380
So you add the application.

67
00:03:36.380 --> 00:03:39.390
And ultimately,
when it's all said and done, and

68
00:03:39.390 --> 00:03:44.270
I just called the application Python
on my laptop, and then gave it a key.

69
00:03:44.270 --> 00:03:48.855
Now the key ends up on the screen, like
here, it ends up in little areas that you

70
00:03:48.855 --> 00:03:52.138
cut and paste, and
you have to cut and paste these keys.

71
00:03:52.138 --> 00:03:55.678
You click on here and you read all
the stuff and you get all the stuff, and

72
00:03:55.678 --> 00:03:57.530
then you have it.

73
00:03:57.530 --> 00:04:01.680
And then there is a little file in
my application called hidden.py,

74
00:04:01.680 --> 00:04:03.890
and it's got exactly this.

75
00:04:03.890 --> 00:04:08.000
It's not the real key, but they look
kind of like this, except much longer.

76
00:04:08.000 --> 00:04:09.510
So if you're going to use the Twitter API,

77
00:04:09.510 --> 00:04:13.800
the first thing you have to do is edit
this and put in the consumer key,

78
00:04:13.800 --> 00:04:16.650
the consumer secret, the token key,
and the token secret.

79
00:04:16.650 --> 00:04:23.020
And those things all come from
this page and this page in here.

80
00:04:23.020 --> 00:04:24.300
You just are cutting and pasting.

81
00:04:24.300 --> 00:04:25.276
So there's API.

82
00:04:25.276 --> 00:04:26.810
You scroll down, and you'll get a secret.

83
00:04:26.810 --> 00:04:28.990
You click on here, and
I'll get the other two values.

84
00:04:28.990 --> 00:04:31.970
So you have to know what those are,
and don't share those with people.

85
00:04:31.970 --> 00:04:33.262
You notice I have them hidden.

86
00:04:33.262 --> 00:04:36.424
And that's because I don't want to share
them with you because then you could do

87
00:04:36.424 --> 00:04:37.660
something, right?

88
00:04:37.660 --> 00:04:40.160
So I take the screen shot and
blank the stuff out.

89
00:04:40.160 --> 00:04:41.940
And then when I put this in the
file for myself,

90
00:04:41.940 --> 00:04:45.680
which I won't show you,
I currently have my values in there.

91
00:04:45.680 --> 00:04:49.080
Now this doesn't authorize anybody,
but it authorizes an application.

92
00:04:49.080 --> 00:04:51.740
So I go to Twitter, I put these values.

93
00:04:51.740 --> 00:04:54.290
I say I need to authorize an application.

94
00:04:54.290 --> 00:04:58.730
And it gives you these four strings that
you then can authorize the application.

95
00:04:58.730 --> 00:05:03.410
So, what happens is, once you've done
this, you use these tokens to create

96
00:05:03.410 --> 00:05:07.460
URLs that allow you to
legitimately access Twitter's API,

97
00:05:07.460 --> 00:05:09.340
application program interface.

98
00:05:10.580 --> 00:05:13.240
And so, we're going to use
this thing with OAuth.

99
00:05:13.240 --> 00:05:17.590
And it turns out OAuth is this
technique for sending signatures and

100
00:05:17.590 --> 00:05:21.010
verifying signatures and
it's used in many applications.

101
00:05:21.010 --> 00:05:25.680
Google uses it, Facebook uses it,
Netflix uses it, Twitter uses it.

102
00:05:25.680 --> 00:05:30.160
It's a really simple and yet very elegant
security mechanism that can make it so

103
00:05:30.160 --> 00:05:34.280
each URL that you're going to hit can
be signed separately using OAuth.

104
00:05:34.280 --> 00:05:35.470
It's quite elegant.

105
00:05:35.470 --> 00:05:37.590
I've written some OAuth code myself.

106
00:05:37.590 --> 00:05:40.690
And we're going to actually just hit a URL.

107
00:05:40.690 --> 00:05:41.880
This URL right here.

108
00:05:43.150 --> 00:05:45.985
And we're going to go find a timeline.

109
00:05:45.985 --> 00:05:48.740
And we'll talk a little bit
more about making these things.

110
00:05:48.740 --> 00:05:54.210
Right now I want to talk about the OAuth,
the security that it takes to do this.

111
00:05:54.210 --> 00:05:59.320
And so, I have written a bit of code
called twurl.

112
00:05:59.320 --> 00:06:02.710
And that's actually right here,
it's in the thing, and

113
00:06:02.710 --> 00:06:07.410
it takes those secrets and
it calls a routine called oauth.

114
00:06:07.410 --> 00:06:08.790
So oauth is a library.

115
00:06:08.790 --> 00:06:13.310
So Python, like always,
has OAuth built in.

116
00:06:13.310 --> 00:06:18.437
And hidden is the hidden file.
hidden.py is this file.

117
00:06:18.437 --> 00:06:20.489
hidden.py is that file.

118
00:06:20.489 --> 00:06:27.314
And then, the twurl reads the secrets,
it imports the oauth library,

119
00:06:27.314 --> 00:06:34.350
uses urllib because it is going to
encode one of those parameters.

120
00:06:34.350 --> 00:06:37.720
And so this stuff here,
don't worry too much about that.

121
00:06:37.720 --> 00:06:41.480
If you were to say like,
how do you do OAuth signing in Python?

122
00:06:41.480 --> 00:06:42.400
And go to Stack Overflow,

123
00:06:42.400 --> 00:06:44.420
you would probably see something
that looks something like that.

124
00:06:44.420 --> 00:06:48.070
As a matter of fact that's
probably how I got it.

125
00:06:48.070 --> 00:06:51.550
But the idea is,
is this is a function that takes a URL and

126
00:06:51.550 --> 00:06:54.700
then some key-value parameters,
this is a dictionary.

127
00:06:54.700 --> 00:06:57.840
And then it basically
creates this long URL.

128
00:06:57.840 --> 00:06:59.936
So this is the URL.

129
00:06:59.936 --> 00:07:03.557
And then all this other stuff,
and when you look at this,

130
00:07:03.557 --> 00:07:07.800
all this stuff here,
this is the signature part, right?

131
00:07:07.800 --> 00:07:12.970
And this URL, this screen name of drchuck,
well that's sending a parameter.

132
00:07:12.970 --> 00:07:14.614
The timeline is what day do you want.

133
00:07:14.614 --> 00:07:19.510
And then this code right here
adds all this other stuff, okay?

134
00:07:19.510 --> 00:07:22.400
And so I just made it so I had this thing
like, oh here's the URL I want to hit,

135
00:07:22.400 --> 00:07:25.700
and here's the parameters that
I want to put on that URL,

136
00:07:25.700 --> 00:07:28.520
augment this URL with
all this magic stuff.

137
00:07:28.520 --> 00:07:33.850
So this routine called augment
adds this stuff right here so

138
00:07:33.850 --> 00:07:36.290
that we can just hit the URL and
then get data back.

139
00:07:37.300 --> 00:07:39.230
If you go back to the previous thing
where we were talking to Google,

140
00:07:39.230 --> 00:07:43.530
we would just make the URL and
retrieve the URL and it worked.

141
00:07:43.530 --> 00:07:47.230
Now we have to make the URL, augment
it with the signature stuff on it, and

142
00:07:47.230 --> 00:07:48.735
this is the signature stuff.

143
00:07:48.735 --> 00:07:52.101
And then we can do a get
request on that URL.

144
00:07:52.101 --> 00:07:53.773
So let's take a look at what we do.

145
00:07:53.773 --> 00:07:54.794
Once we have this.

146
00:07:54.794 --> 00:07:58.383
So, we have this little guy
called twtest, and

147
00:07:58.383 --> 00:08:03.290
it imports the augment function,
and it imports urllib.

148
00:08:03.290 --> 00:08:08.700
And so it says, okay I would like
to see the user's timeline for

149
00:08:08.700 --> 00:08:10.960
the screen name of drchuck and
show me the first two.

150
00:08:11.960 --> 00:08:15.080
And so it augments the URL, which
means it's adding the stuff.

151
00:08:15.080 --> 00:08:18.570
So, we take the this thing and
that's how it adds all the stuff, right?

152
00:08:18.570 --> 00:08:23.070
We pass in this part and
then we pass in the two parameters,

153
00:08:23.070 --> 00:08:24.320
the count and the screen name.

154
00:08:24.320 --> 00:08:30.140
And then the augment adds the security
stuff so when we print this URL,

155
00:08:30.140 --> 00:08:33.780
clear that, we print this URL it's
going to look pretty much like that.

156
00:08:33.780 --> 00:08:36.200
And I'll run this in a second so
you see how it really works.

157
00:08:36.200 --> 00:08:38.010
Dot, dot, dot something.

158
00:08:38.010 --> 00:08:41.840
Then this bit of code is pretty
much exactly the code we used

159
00:08:41.840 --> 00:08:46.900
when we were doing this with Google and
so we do a urlopen and then we do a read.

160
00:08:46.900 --> 00:08:50.330
And then we print that data, and
this is going to be JSON data, and

161
00:08:50.330 --> 00:08:53.340
then we can ask information
about the headers.

162
00:08:53.340 --> 00:08:55.960
If you go way back two or
three lectures ago,

163
00:08:55.960 --> 00:09:01.430
I talked about how you get the headers
of a HTTP request and the body.

164
00:09:01.430 --> 00:09:06.098
This is our way of asking for the headers.

165
00:09:06.098 --> 00:09:09.000
Let me clear that.

166
00:09:09.000 --> 00:09:10.430
This gets the body.

167
00:09:11.780 --> 00:09:15.100
And this gets a dictionary of the headers.

168
00:09:15.100 --> 00:09:17.710
And you'll see why we want to see that.

169
00:09:17.710 --> 00:09:19.680
And I'm just going to print
all that stuff out.

170
00:09:19.680 --> 00:09:23.685
In this, I'm going to keep it really simple.
I want to focus on what's going on here,

171
00:09:23.685 --> 00:09:25.770
where we're augmenting this URL.

172
00:09:25.770 --> 00:09:30.520
Just remember that we're getting JSON back
here and we're getting JSON back there.

173
00:09:30.520 --> 00:09:32.380
So let me go ahead and run this.

174
00:09:32.380 --> 00:09:36.600
It's going to be really boring.

175
00:09:36.600 --> 00:09:40.483
vi twtest.py
so that's the program and

176
00:09:40.483 --> 00:09:46.800
again this is really to show you
how this augment thing works.

177
00:09:46.800 --> 00:09:49.240
Because in the next one I'm
going to just assume you know that.

178
00:09:49.240 --> 00:09:50.772
And then we're going to just read it.

179
00:09:50.772 --> 00:09:52.600
We're going to read both the headers
and the data.

180
00:09:54.070 --> 00:09:55.660
We just print everything out.

181
00:09:55.660 --> 00:09:56.880
So, if I say python

182
00:09:58.280 --> 00:09:59.940
twtest py.

183
00:10:01.830 --> 00:10:03.100
So, it just ran.

184
00:10:03.100 --> 00:10:05.775
So, let me sort of show you,
walk you through what happened there.

185
00:10:07.500 --> 00:10:08.000
Okay.

186
00:10:09.200 --> 00:10:14.870
So, this is that augmented URL, and
all that junk is the signature.

187
00:10:14.870 --> 00:10:17.060
It's not, OAuth is really cool.

188
00:10:17.060 --> 00:10:18.630
You don't actually send the secret.

189
00:10:18.630 --> 00:10:20.810
You send this thing called a signature.

190
00:10:20.810 --> 00:10:24.960
And it's got these things that include
the time so you can't do it twice.

191
00:10:24.960 --> 00:10:26.730
All these other things are really cool.

192
00:10:26.730 --> 00:10:33.700
And so we just did a urllib open and
a read, and then we got some JSON.

193
00:10:33.700 --> 00:10:35.370
And it's a lot of JSON.

194
00:10:35.370 --> 00:10:36.860
And later we'll take a look at this JSON.

195
00:10:36.860 --> 00:10:42.350
So, what we got were the first
two entries of my status

196
00:10:42.350 --> 00:10:47.570
which is going to go down, down.

197
00:10:47.570 --> 00:10:48.140
There it goes.

198
00:10:48.140 --> 00:10:49.090
Let's see.

199
00:10:49.090 --> 00:10:53.070
So, this is the end of that. We'll see this
in a prettier way in an upcoming slide.

200
00:10:53.070 --> 00:10:57.370
And remember I printed out
both the body and the headers.

201
00:10:57.370 --> 00:10:59.510
And so in the headers it's a dictionary.

202
00:10:59.510 --> 00:11:01.190
So this is a dictionary.

203
00:11:01.190 --> 00:11:03.590
And this tells us something, right?

204
00:11:03.590 --> 00:11:07.730
And if you go back to HTTP,
you don't have to know all this stuff.

205
00:11:07.730 --> 00:11:12.755
There was a content length and this turns
out to be like when our rate limit is

206
00:11:12.755 --> 00:11:17.330
going to get reset because we're talking
to an API that gives us our rate limit.

207
00:11:17.330 --> 00:11:19.690
And this one's probably
the most important thing.

208
00:11:19.690 --> 00:11:22.558
The rate limit remaining says 178.

209
00:11:22.558 --> 00:11:24.920
Which means we can only
do this 178 times today.

210
00:11:24.920 --> 00:11:26.531
All right?

211
00:11:26.531 --> 00:11:28.740
It's going to reset perhaps tomorrow.

212
00:11:28.740 --> 00:11:32.950
So, I'll do it again and you'll see that
my remaining thing will go down to 177.

213
00:11:32.950 --> 00:11:34.585
So, I'll just run it again.

214
00:11:34.585 --> 00:11:36.493
[SOUND] I did it.

215
00:11:36.493 --> 00:11:37.920
Oops.

216
00:11:37.920 --> 00:11:40.400
I went down to 176.

217
00:11:40.400 --> 00:11:44.476
So, it's the rate limiting factor 176.

218
00:11:44.476 --> 00:11:45.690
And there's other things.

219
00:11:45.690 --> 00:11:48.060
And as you read the API specifications.

220
00:11:48.060 --> 00:11:50.700
And this is not a class on
how to talk to Twitter.

221
00:11:50.700 --> 00:11:54.900
You will see, oh, I will give you back
the rate limit, the number of API calls

222
00:11:54.900 --> 00:12:00.440
you have remaining in the header field
x-rate-limit-remaining.

223
00:12:00.440 --> 00:12:04.320
So you just look that up with square
brackets and then you can get that number.

224
00:12:04.320 --> 00:12:05.600
Okay?

225
00:12:05.600 --> 00:12:08.270
So now what we're going to do
is we're going to take a look at

226
00:12:08.270 --> 00:12:11.500
a little more sophisticated application
that's going to do the same thing.

227
00:12:12.990 --> 00:12:16.610
And we're just going to do something a little
more intelligent and parse the XML,

228
00:12:16.610 --> 00:12:19.710
and actually go through
not just one thing,

229
00:12:19.710 --> 00:12:22.610
but I mean parse the JSON and
go through it.

230
00:12:22.610 --> 00:12:26.420
So, we're going to take a look at
the API developer documentation for

231
00:12:26.420 --> 00:12:27.860
the friends list.

232
00:12:27.860 --> 00:12:30.990
So we're just going to say I want
to see this person's friend list.

233
00:12:30.990 --> 00:12:33.430
We're going to tell it which screen
name we're interested in,

234
00:12:33.430 --> 00:12:36.640
we're going to use the augment, everything,
except now we're going to spend a little

235
00:12:36.640 --> 00:12:41.250
more time focusing on the data
we get back and parsing, okay?

236
00:12:41.250 --> 00:12:46.821
So here is twitter2.py.

237
00:12:46.821 --> 00:12:51.312
So, twitter2.py,
it looks a lot like that twitter1.py,

238
00:12:51.312 --> 00:12:55.990
except, I mean the twtest.py,
we import urllib, import twurl.

239
00:12:55.990 --> 00:12:59.150
We're going to import json, cause we're
actually going to parse what we get back.

240
00:12:59.150 --> 00:13:03.130
We read the API documentation,
and that's the base URL.

241
00:13:03.130 --> 00:13:06.430
And we're going to write a loop here,
a while loop, and we're going to ask for

242
00:13:06.430 --> 00:13:07.920
a Twitter account.

243
00:13:07.920 --> 00:13:12.280
If we just press enter, which means the
length of that string is less than one,

244
00:13:12.280 --> 00:13:13.240
we're going to break.

245
00:13:13.240 --> 00:13:16.940
Then we're going to augment
this URL with the account.

246
00:13:16.940 --> 00:13:18.770
This account comes from input, right?

247
00:13:18.770 --> 00:13:21.350
And we're going to say,
give me the five friends.

248
00:13:21.350 --> 00:13:25.040
Give me the five friends of
whatever account we type in.

249
00:13:25.040 --> 00:13:27.700
And then we will print out,
just for debugging, the whole URL.

250
00:13:27.700 --> 00:13:29.400
This is the augmented URL.

251
00:13:30.890 --> 00:13:32.560
That's the augmented one.

252
00:13:32.560 --> 00:13:36.190
Then we're going to open,
this code is just from the previous one.

253
00:13:36.190 --> 00:13:37.436
We're going to open the URL.

254
00:13:37.436 --> 00:13:41.710
We're going to read the body,
which will be JSON.

255
00:13:41.710 --> 00:13:42.820
This reads the body.

256
00:13:44.150 --> 00:13:46.060
Which is in JSON.

257
00:13:46.060 --> 00:13:50.960
This is the headers
which are a dictionary.

258
00:13:52.180 --> 00:13:54.660
So, as a side effect to this read.

259
00:13:54.660 --> 00:13:58.540
We can say, oh, read the body but
also hold onto the headers and

260
00:13:58.540 --> 00:13:59.800
give them to me later.

261
00:13:59.800 --> 00:14:03.440
So data will be the JSON and
headers will be the remaining.

262
00:14:03.440 --> 00:14:06.520
And so if you recall,
when I was showing you before,

263
00:14:06.520 --> 00:14:10.510
we can find out what the remaining
number of times I can use this API by

264
00:14:10.510 --> 00:14:15.310
looking up in the headers that we got
back under, x-rate-limit-remaining.

265
00:14:15.310 --> 00:14:16.060
Look it up.

266
00:14:16.060 --> 00:14:17.350
Print it out. Okay?

267
00:14:17.350 --> 00:14:22.110
Then what we're going to do is
were going to deserialize the JSON.

268
00:14:22.110 --> 00:14:27.730
Remember the JSON, the body, is like
curly braces and dot, dot, dot, dot, dot,

269
00:14:27.730 --> 00:14:34.130
and we're going to turn that into a list,
an array, because we asked for five.

270
00:14:34.130 --> 00:14:35.810
It's going to start us an array.

271
00:14:35.810 --> 00:14:41.230
And give us back the array of entries
in this person's friend list.

272
00:14:41.230 --> 00:14:44.770
Then what we're going to do, and
this is really common and helpful,

273
00:14:44.770 --> 00:14:49.082
is we're going to dump that out with an
indent of four, and that's pretty printing.

274
00:14:50.082 --> 00:14:54.480
And if you're ever looking
at JSON, and I guess I'll show you

275
00:14:54.480 --> 00:14:57.910
this next time I flip over, you can find
a pretty printer where you can cut and

276
00:14:57.910 --> 00:15:02.770
paste ugly JSON into a web page and
it will show you the pretty JSON.

277
00:15:02.770 --> 00:15:05.642
But this, I'm going to do this with
json.dumps, and

278
00:15:05.642 --> 00:15:09.823
that's taking this array of objects and
then dumping it in a nice thing where

279
00:15:09.823 --> 00:15:13.893
everything lines up and they indent it
and outdent it and stuff like that.

280
00:15:13.893 --> 00:15:15.380
So that's nice debugging.

281
00:15:15.380 --> 00:15:19.320
I like doing that. Indent's four
is how many spaces to put on each thing.

282
00:15:19.320 --> 00:15:23.320
So then what I'm going to do is I'm going to
go through the list of all the users who

283
00:15:23.320 --> 00:15:24.400
are friends.

284
00:15:24.400 --> 00:15:27.747
And then for each user, so
user's going to go [SOUND].

285
00:15:27.747 --> 00:15:32.122
That's how you loop through a list in
Python, because with the JSON turned into a

286
00:15:32.122 --> 00:15:37.060
Python list, and then we're going to print out
the screen_name and their status of text.

287
00:15:37.060 --> 00:15:41.810
And so we're just going to parse all
this stuff and go dig through it.

288
00:15:41.810 --> 00:15:45.850
And so this is what that looks like.
We're going to retrieve the URL,

289
00:15:45.850 --> 00:15:49.610
we've got an object that includes
the users which is a list.

290
00:15:49.610 --> 00:15:52.947
And here's the first one and
then there's many of these things.

291
00:15:52.947 --> 00:15:54.293
There, it's very, very long.

292
00:15:54.293 --> 00:15:55.803
I truncated it here.

293
00:15:55.803 --> 00:16:00.112
And then it's showing me the screen name,
and the person, and the status

294
00:16:00.112 --> 00:16:03.080
and it's just pulling it out.

295
00:16:03.080 --> 00:16:05.050
So, let's see.

296
00:16:05.050 --> 00:16:06.960
We find the screen name is here.

297
00:16:06.960 --> 00:16:10.170
We find the status text is here, right?

298
00:16:10.170 --> 00:16:12.450
So clear this, let me be clearer on this.

299
00:16:12.450 --> 00:16:16.660
So this is the JSON debugged,
actually truncated.

300
00:16:16.660 --> 00:16:18.620
And we're going to go in for
each of the users,

301
00:16:18.620 --> 00:16:22.550
we're going to pull out the status text,
which is this bit right here, and

302
00:16:22.550 --> 00:16:28.450
show that. And then we are going to find the
screen name of the person, right there.

303
00:16:28.450 --> 00:16:31.370
This happens to be my friend
list from a while back,

304
00:16:31.370 --> 00:16:33.740
and I had just added Leah Culver.

305
00:16:33.740 --> 00:16:38.190
She's an open source software developer,
and she wrote the PHP OAuth.

306
00:16:41.680 --> 00:16:42.570
She wrote free code.

307
00:16:42.570 --> 00:16:43.400
So, thank you Leah.

308
00:16:46.050 --> 00:16:47.040
She wrote it.

309
00:16:47.040 --> 00:16:49.260
I use her code all the time.

310
00:16:49.260 --> 00:16:50.490
So let's run this code.

311
00:16:50.490 --> 00:16:52.020
Let's go ahead and run this code.

312
00:16:52.020 --> 00:16:55.820
And before I do that, I'm going to show
you how to do JSON pretty printing.

313
00:16:55.820 --> 00:17:00.460
So if you end up with some really ugly
JSON like we had from this other thing

314
00:17:00.460 --> 00:17:05.900
that I just did, and it's really long and
really bad, I can copy this.

315
00:17:05.900 --> 00:17:06.620
I can take this.

316
00:17:06.620 --> 00:17:11.286
The JSON starts there
with that square brace.

317
00:17:11.286 --> 00:17:14.781
It looks scary but you kind of get,
it's like the matrix after a while,

318
00:17:14.781 --> 00:17:18.417
you sort of figure out what's going on,
it starts to make more sense.

319
00:17:18.417 --> 00:17:19.615
Okay.

320
00:17:19.615 --> 00:17:21.789
Oh, I messed up.

321
00:17:21.789 --> 00:17:23.394
I got to start over, get that JSON.

322
00:17:27.185 --> 00:17:32.410
So, right there, I copy it.

323
00:17:32.410 --> 00:17:37.310
Then I go to a Google browser and
I say, pretty print json, and

324
00:17:37.310 --> 00:17:40.620
pick one,
hopefully one without too many ads.

325
00:17:40.620 --> 00:17:45.340
Paste that monstrously difficult
stuff to read, and then there you go.

326
00:17:45.340 --> 00:17:46.765
It reads perfectly, right?

327
00:17:46.765 --> 00:17:49.533
And so this just,
if you're debugging something and

328
00:17:49.533 --> 00:17:51.201
you're printing JSON out, fine.

329
00:17:51.201 --> 00:17:57.177
But it's easier in Python to do
what I'm doing here in twitter2.py,

330
00:17:57.177 --> 00:18:03.610
and that is, I've got my own pretty
printer, right here where I dumps.

331
00:18:03.610 --> 00:18:05.970
So this is the JSON data
that's been parsed, but

332
00:18:05.970 --> 00:18:08.270
then I dump it with an indent of four.

333
00:18:08.270 --> 00:18:10.460
Okay, so
we already talked through this thing.

334
00:18:10.460 --> 00:18:13.880
We read an account, we augment
a URL with these two parameters.

335
00:18:13.880 --> 00:18:14.990
We do a read of it.

336
00:18:14.990 --> 00:18:18.920
We're going to look up the remaining
rates that the number thinks we got.

337
00:18:18.920 --> 00:18:23.817
Then we're going to pull out the screen
name and the status text and print that.

338
00:18:23.817 --> 00:18:30.393
So, python twitter2.py.

339
00:18:30.393 --> 00:18:32.890
Leah Culver won't be my
first friend anymore.

340
00:18:32.890 --> 00:18:34.940
It'll be whoever I did recently.

341
00:18:34.940 --> 00:18:36.464
Yeah.

342
00:18:36.464 --> 00:18:40.110
Okay, so there I get, so you see
the pretty printing works out really nice.

343
00:18:41.290 --> 00:18:41.790
Right?

344
00:18:44.974 --> 00:18:46.740
I asked for the last five users.

345
00:18:46.740 --> 00:18:48.710
It's quite a bit of stuff.

346
00:18:48.710 --> 00:18:50.600
And after a while you don't want to
print all this stuff out.

347
00:18:50.600 --> 00:18:51.770
Right?

348
00:18:51.770 --> 00:18:52.910
So let's go up to top here.

349
00:18:54.550 --> 00:18:56.510
So I have 14 remaining calls to this.

350
00:18:56.510 --> 00:18:59.570
So I got it figured out nicely.
You could look that up.

351
00:18:59.570 --> 00:19:02.590
And then users is an array,
and there's all this data.

352
00:19:02.590 --> 00:19:05.570
Let's see, let's find the screen name.

353
00:19:05.570 --> 00:19:11.020
The status text.

354
00:19:11.020 --> 00:19:12.400
I pulled that out for

355
00:19:12.400 --> 00:19:16.300
this first person, now let's see
if I can find the screen name.

356
00:19:16.300 --> 00:19:19.490
Screen name knightfdn, knight foundation.

357
00:19:19.490 --> 00:19:21.380
So let's go back down to the bottom.

358
00:19:23.100 --> 00:19:27.998
So, I said that's a person I'd,
and then Rose.

359
00:19:27.998 --> 00:19:29.460
Hi Rose.

360
00:19:29.460 --> 00:19:31.060
Rose from UCLA.

361
00:19:31.060 --> 00:19:33.820
And let me see who Rose's friends are.

362
00:19:33.820 --> 00:19:35.400
So I had 14 left.

363
00:19:38.340 --> 00:19:41.045
Okay, so this is Rose's five friends.

364
00:19:41.045 --> 00:19:42.640
Right?

365
00:19:42.640 --> 00:19:45.760
So USNewsEducation.

366
00:19:45.760 --> 00:19:48.530
Let's see who USNewsEducation's
five friends are.

367
00:19:50.820 --> 00:19:55.140
Now I'm doing all these as me, and
if we go way up to the top here, well,

368
00:19:55.140 --> 00:19:56.330
I don't know, could be a ways.

369
00:19:56.330 --> 00:19:59.150
Come on little mouse cursor.

370
00:19:59.150 --> 00:20:01.070
Let's see how many I got left.

371
00:20:01.070 --> 00:20:03.421
Every time I do this,
my number will go down.

372
00:20:08.764 --> 00:20:09.850
Right there.

373
00:20:09.850 --> 00:20:11.290
See, I only have 12 left.

374
00:20:11.290 --> 00:20:13.900
After a while, I would comment
out the dumping of this JSON.

375
00:20:13.900 --> 00:20:16.950
I only print the JSON out when I'm
actually trying to figure out how

376
00:20:18.080 --> 00:20:19.080
to parse it.

377
00:20:19.080 --> 00:20:22.290
So that gives you a sense
of using that Twitter API.

378
00:20:23.370 --> 00:20:28.780
And that sort of brings us
to the end of this API web

379
00:20:28.780 --> 00:20:32.230
reading structured data
using web technologies.

380
00:20:32.230 --> 00:20:35.020
And application program interfaces,
you know,

381
00:20:35.020 --> 00:20:38.220
they're a set of rules, we can
read the documentation.

382
00:20:38.220 --> 00:20:39.480
Figure out how to write code.

383
00:20:39.480 --> 00:20:44.760
Sometimes you have to use things
like OAuth to secure your URLs and

384
00:20:44.760 --> 00:20:47.760
often these things have rate limits.

385
00:20:48.980 --> 00:20:53.990
We talked both about XML and
JSON as serialization formats.

386
00:20:53.990 --> 00:20:55.533
So we've covered a lot of stuff.

387
00:20:55.533 --> 00:20:57.485
We've covered APIs.

388
00:20:57.485 --> 00:20:58.875
We talked about OAuth.

389
00:20:58.875 --> 00:21:01.010
You don't have to know all this stuff.

390
00:21:01.010 --> 00:21:04.590
As you start to look for sources of data,
these are just tools in a tool kit.

391
00:21:05.830 --> 00:21:10.200
And we'll have you do some assignments
that hit on some of these things, and

392
00:21:10.200 --> 00:21:12.730
then lectures in later courses

393
00:21:12.730 --> 00:21:15.150
will make use of the skills that
we've learned in this section.