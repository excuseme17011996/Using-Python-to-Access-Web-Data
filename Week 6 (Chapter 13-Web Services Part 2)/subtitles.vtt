WEBVTT

1
00:00:08.349 --> 00:00:12.500
Now we're gonna talk about the second
of our serialization format.

2
00:00:12.500 --> 00:00:17.430
So you take a piece of data inside of
Python, you gotta send it to Java,

3
00:00:17.430 --> 00:00:21.470
or PHP or whatever, and you gotta
come up with a serialization format.

4
00:00:21.470 --> 00:00:25.850
XML is a great serialization format for
documents, especially things that kind of

5
00:00:25.850 --> 00:00:29.850
have infinitely nested kinds of things,
like a paragraph within this and that.

6
00:00:29.850 --> 00:00:33.650
And HTML is kind of like XML and
it's a good way to represent documents,

7
00:00:33.650 --> 00:00:38.420
and so that's why this
JavaScript Object Notation is not really

8
00:00:38.420 --> 00:00:41.540
used to represent HTML at all.

9
00:00:42.540 --> 00:00:44.310
And so, JavaScript Object Notation, and

10
00:00:44.310 --> 00:00:48.330
I'll give you this video of
Douglas Crockford, you should watch it.

11
00:00:48.330 --> 00:00:50.740
He's a pretty funny guy.

12
00:00:50.740 --> 00:00:55.606
He claims that he did not invent JSON,
that he simply discovered JSON.

13
00:00:55.606 --> 00:01:01.333
And it is really just the literal, it's a
subtle clean up of the literal syntax for

14
00:01:01.333 --> 00:01:05.530
JavaScript or
the constant syntax for JavaScript.

15
00:01:05.530 --> 00:01:09.923
So in Python you say, here's a list and
it's square bracket this, comma this,

16
00:01:09.923 --> 00:01:12.780
comma this, comma that and
that's a list, right?

17
00:01:12.780 --> 00:01:15.500
That's the constant,
what a list constant looks like.

18
00:01:15.500 --> 00:01:20.040
Well JSON is really nothing more
than a cleaned up version of

19
00:01:20.040 --> 00:01:25.080
how you describe a list or an array in
JavaScript or an object in JavaScript.

20
00:01:25.080 --> 00:01:28.550
An object then becomes like
a dictionary in Python.

21
00:01:28.550 --> 00:01:33.070
And so JSON looks a lot like Python.

22
00:01:33.070 --> 00:01:34.706
It looks like Python constants.

23
00:01:34.706 --> 00:01:40.410
And so it's kinda very natural for
somebody who knows Python to look at JSON.

24
00:01:40.410 --> 00:01:44.050
But, it's not Python, it's JavaScript.

25
00:01:44.050 --> 00:01:45.570
But, it looks pretty much the same.

26
00:01:47.570 --> 00:01:49.310
And watch the Douglas Crockford video.

27
00:01:50.770 --> 00:01:54.740
Douglas Crockford is an irascible,
funny guy.

28
00:01:54.740 --> 00:01:56.180
He wrote this book.

29
00:01:56.180 --> 00:01:59.290
The book on the left is
written by Douglas Crockford

30
00:01:59.290 --> 00:02:01.430
called JavaScript the Good Parts.

31
00:02:01.430 --> 00:02:05.100
And on the right side is another book
written by another author called

32
00:02:05.100 --> 00:02:06.990
JavaScript the Definitive Guide.

33
00:02:06.990 --> 00:02:11.960
And the relative thickness of
the book is making the point.

34
00:02:11.960 --> 00:02:14.680
So JavaScript is a super powerful and
amazing language, and

35
00:02:14.680 --> 00:02:17.940
what Douglas Crockford says is,
we shouldn't use all of it,

36
00:02:17.940 --> 00:02:19.100
we should only use the good parts.

37
00:02:20.400 --> 00:02:24.240
So, as you will see in the JSON video,
the interview that I did with

38
00:02:24.240 --> 00:02:29.330
Douglas Crockford,
JSON.org is something that he just put up.

39
00:02:29.330 --> 00:02:33.940
He pretty much defined it, and
the world just started using it.

40
00:02:33.940 --> 00:02:37.320
He didn't have a corporation or
the US government or

41
00:02:37.320 --> 00:02:40.040
anybody trying to force JSON
down anybody's throats.

42
00:02:40.040 --> 00:02:43.739
He just defined it,
registered JSON.org, and voila,

43
00:02:43.739 --> 00:02:46.918
we have a [LAUGH] whole
industry of JSon stuff now.

44
00:02:46.918 --> 00:02:52.640
So JSON solves roughly the same problem.

45
00:02:53.830 --> 00:02:58.190
The thing that JSON doesn't do as well,
as a infinitely set of nested things,

46
00:02:58.190 --> 00:03:00.000
like XML is better for that.

47
00:03:00.000 --> 00:03:03.890
And it's a little less
self describing okay.

48
00:03:03.890 --> 00:03:08.750
So JSON really represents,
only has two basic structures.

49
00:03:08.750 --> 00:03:12.340
It is either a list and
we call that an array.

50
00:03:12.340 --> 00:03:15.650
Or a dictionary,
it would call it object, okay?

51
00:03:15.650 --> 00:03:18.600
So dictionaries and objects,
are key value pairs.

52
00:03:18.600 --> 00:03:21.210
And then lists and arrays, are lists.

53
00:03:21.210 --> 00:03:27.920
And so, it turns out that the one of
the things that JSON has as its best

54
00:03:27.920 --> 00:03:34.300
advantage, is the fact that inside Python,
we tend to make lists and dictionaries.

55
00:03:34.300 --> 00:03:37.960
And in JavaScript,
we tend to make arrays and HashMaps.

56
00:03:37.960 --> 00:03:41.720
And JSON is a great way to
represent both of those structures.

57
00:03:41.720 --> 00:03:44.680
So those are the two structures
that we tend to do a language

58
00:03:44.680 --> 00:03:46.160
after language after language.

59
00:03:46.160 --> 00:03:50.670
So if you think of the goal of,
one language has some data in it.

60
00:03:50.670 --> 00:03:53.880
We need to serialize it, send it to
another language, deserialize it,

61
00:03:53.880 --> 00:03:55.710
pull it out to another language.

62
00:03:55.710 --> 00:04:02.133
Why not come up with a format that's
most natural between those, okay?

63
00:04:02.133 --> 00:04:06.050
And so, the syntax again
will seem familiar to you,

64
00:04:06.050 --> 00:04:10.410
because it almost looks
exactly like Python.

65
00:04:11.470 --> 00:04:13.060
So, this is some JSON.

66
00:04:13.060 --> 00:04:14.030
There are no lists.

67
00:04:14.030 --> 00:04:15.640
This is just objects.

68
00:04:15.640 --> 00:04:17.200
And so, objects can be nested.

69
00:04:17.200 --> 00:04:22.038
So, again this is the triple quote syntax,
this is a string and

70
00:04:22.038 --> 00:04:25.080
again, where your gonna get this is not
necessarily just from a string, but

71
00:04:25.080 --> 00:04:27.710
it makes these very simple.

72
00:04:27.710 --> 00:04:31.470
And so, this is when you start with the
curly brace then your gonna get a set of

73
00:04:31.470 --> 00:04:34.570
key value pairs followed by commas.

74
00:04:34.570 --> 00:04:38.380
And then, this is a key,
this is again a key and this is a value,

75
00:04:38.380 --> 00:04:41.310
but this value here is a whole object.

76
00:04:41.310 --> 00:04:45.900
And within that object there's key
value pairs, comma key value, and

77
00:04:45.900 --> 00:04:47.310
then there's another one.

78
00:04:47.310 --> 00:04:53.335
So if you look at this outer thing,
there are three keys.

79
00:04:53.335 --> 00:04:54.705
The first key is a string.

80
00:04:54.705 --> 00:04:56.375
The second key is an object.

81
00:04:56.375 --> 00:04:57.755
The third key is an object.

82
00:04:58.855 --> 00:05:02.405
And then within this phone object,
we've got a key value pair,

83
00:05:02.405 --> 00:05:06.955
a two key value pair, so with an email
object, we have one key value pair.

84
00:05:06.955 --> 00:05:09.745
And this is kind of roughly
the equivalent of the person's name and

85
00:05:09.745 --> 00:05:12.130
the fact that the Internet and
phone number's international.

86
00:05:12.130 --> 00:05:15.570
Now one thing you'll notice,
is there's no attributes.

87
00:05:15.570 --> 00:05:18.690
And again,
that's where XML sometimes has advantages.

88
00:05:18.690 --> 00:05:22.536
And so, but that's okay, we just made
a different data type called type,

89
00:05:22.536 --> 00:05:24.501
to capture what was an XML attribute.

90
00:05:24.501 --> 00:05:27.832
We really just have key value pairs here,
and that's it.

91
00:05:27.832 --> 00:05:30.815
Dictionaries, within dictionaries,
within dictionaries.

92
00:05:30.815 --> 00:05:33.177
So, it's a data structure thing, and

93
00:05:33.177 --> 00:05:37.910
you kind of construct the shape of your
JSON, the best way to move data around.

94
00:05:39.080 --> 00:05:39.870
Okay.

95
00:05:39.870 --> 00:05:45.780
So this again is this json string,
in triple quotes that came from wherever.

96
00:05:45.780 --> 00:05:47.161
And we have to deserialize.

97
00:05:50.282 --> 00:05:52.020
That's the first thing
you gotta think about.

98
00:05:52.020 --> 00:05:55.090
Got me some JSON,
time to deserialize that.

99
00:05:55.090 --> 00:06:00.360
Well, like everything we do in Python,
we have an import statement.

100
00:06:00.360 --> 00:06:03.487
JSON [NOISE] built into Python, boom.

101
00:06:03.487 --> 00:06:04.110
Okay.

102
00:06:04.110 --> 00:06:05.280
So it's built in.

103
00:06:05.280 --> 00:06:06.300
So you say import JSON.

104
00:06:06.300 --> 00:06:10.130
So that means you have a whole
library of stuff to do all this stuff.

105
00:06:10.130 --> 00:06:12.310
It's even cleaner than ElementTree.

106
00:06:12.310 --> 00:06:14.620
So import JSON, that's the JSON library.

107
00:06:14.620 --> 00:06:16.280
Use the loads.

108
00:06:16.280 --> 00:06:20.317
So the loads,
load from string is what that says, and

109
00:06:20.317 --> 00:06:23.296
we pass in this string data, all of it.

110
00:06:23.296 --> 00:06:25.373
Double quotes are just part of the JSON,
right?

111
00:06:25.373 --> 00:06:26.939
The double quotes are just
part of the JSON.

112
00:06:26.939 --> 00:06:31.650
So that says this is the deserialize step.

113
00:06:31.650 --> 00:06:34.510
Deserialize from string
to internal structure.

114
00:06:34.510 --> 00:06:37.930
But this is where everybody loves JSON.

115
00:06:37.930 --> 00:06:42.920
The thing you get back, is a dictionary.

116
00:06:42.920 --> 00:06:47.640
It's not like an object that you can
query, it's a actual dictionary.

117
00:06:47.640 --> 00:06:51.170
So, if you were to look at this
dictionary that comes back, well,

118
00:06:51.170 --> 00:06:52.740
it's got three keys in it.

119
00:06:52.740 --> 00:06:53.340
How many things?

120
00:06:53.340 --> 00:06:54.410
There's three of them.

121
00:06:54.410 --> 00:06:55.640
It's got key values.

122
00:06:55.640 --> 00:06:59.270
And the way you pull stuff out,
is you just use it as a dictionary.

123
00:06:59.270 --> 00:07:00.260
Info sub name.

124
00:07:01.310 --> 00:07:03.960
Or, info sub email sub hide.

125
00:07:03.960 --> 00:07:07.510
So, info sub name is that text.

126
00:07:07.510 --> 00:07:09.070
You don't have to go to the dot text.

127
00:07:09.070 --> 00:07:10.960
If you go back to the XML,

128
00:07:10.960 --> 00:07:14.030
we had to do all these find
this then go within that thing.

129
00:07:14.030 --> 00:07:17.690
Because XML was thinking of the world
as trees, which is not how this is.

130
00:07:17.690 --> 00:07:21.408
This is thinking of them as lists or
key value pairs, right.

131
00:07:21.408 --> 00:07:27.090
So info["name"] says
info is this whole thing,

132
00:07:27.090 --> 00:07:31.626
subname is this value right here,
that's what you get.

133
00:07:31.626 --> 00:07:35.620
info["email"] is this thing.

134
00:07:35.620 --> 00:07:37.760
But that itself, is a dictionary.

135
00:07:37.760 --> 00:07:42.401
So this ["email"] retrieves a dictionary
and then ["hide"] within that,

136
00:07:42.401 --> 00:07:47.110
retrieves the value that's under the hide
key within that inner dictionary.

137
00:07:47.110 --> 00:07:53.132
So you can see that it's a lot easier
to think about how to pull this apart,

138
00:07:53.132 --> 00:07:56.940
because this turns into
a native dictionary.

139
00:07:59.318 --> 00:08:00.700
That is super nice.

140
00:08:00.700 --> 00:08:06.730
That's one of the super advantages of
JSON, and that's why everybody loves it.

141
00:08:06.730 --> 00:08:12.670
You just parse it with this loads and then
you use it in its natural form in JSON.

142
00:08:12.670 --> 00:08:16.260
So, you start with a dictionary and
a list.

143
00:08:16.260 --> 00:08:21.110
You make JSON and you pull that into Java,
and it's a HashMap and

144
00:08:21.110 --> 00:08:23.170
an array, and it just works,

145
00:08:23.170 --> 00:08:29.000
cuz it's really better at representing
the natural things that applications do.

146
00:08:29.000 --> 00:08:31.970
So this code's in json1.py.

147
00:08:31.970 --> 00:08:39.730
It's gonna be super boring cuz it's gonna
be really easy, vi json1 So, there we are.

148
00:08:39.730 --> 00:08:41.750
Code you just saw before.

149
00:08:41.750 --> 00:08:42.250
We'll run it.

150
00:08:47.256 --> 00:08:49.855
[SOUND] Pull that stuff apart.

151
00:08:49.855 --> 00:08:51.610
Simple, beautiful, elegant.

152
00:08:53.460 --> 00:08:58.060
Similarly, if we take a look at
a situation where we're gonna

153
00:08:58.060 --> 00:08:59.860
do a JSON representation of a list.

154
00:09:01.160 --> 00:09:05.220
What we see here is a square bracket,
again looking like Python.

155
00:09:05.220 --> 00:09:09.080
Square bracket is the way to
indicate that it's a list.

156
00:09:09.080 --> 00:09:10.990
Although they would call
it an array in JSON.

157
00:09:10.990 --> 00:09:13.490
But for us,
we in Python we call it a list.

158
00:09:13.490 --> 00:09:16.180
And in our list,
we have two things in our list.

159
00:09:16.180 --> 00:09:22.440
A list is things, in this case an object,
and another object separated by a comma.

160
00:09:22.440 --> 00:09:25.209
So these are kind of a person object, and

161
00:09:25.209 --> 00:09:30.590
in the person object we got id maps to
001, x maps to 2, name maps to Chuck.

162
00:09:30.590 --> 00:09:35.198
In the second object, id maps to 009,
x maps to 7, name maps to Chuck.

163
00:09:35.198 --> 00:09:38.032
So there are two objects, 0 and 1.

164
00:09:38.032 --> 00:09:42.910
This is subzero and this is subone.

165
00:09:42.910 --> 00:09:44.210
Okay, so again,

166
00:09:44.210 --> 00:09:48.850
we're using the triple quote syntax
to produce our deserializable code.

167
00:09:48.850 --> 00:09:50.730
The string that's gonna be deserialized,

168
00:09:50.730 --> 00:09:53.420
we use the JSON library
that comes from the import.

169
00:09:53.420 --> 00:09:56.460
We do load string,
which is the deserialization step.

170
00:09:56.460 --> 00:09:58.100
And what do we get back?

171
00:09:58.100 --> 00:10:00.440
This is a list.

172
00:10:00.440 --> 00:10:03.600
Not an object that acts like a list,
it's really a list.

173
00:10:03.600 --> 00:10:07.050
Because JSON has these two simple things,
that's just lists and dictionaries.

174
00:10:07.050 --> 00:10:12.180
So JSON loads, sees the bracket,
say's oh, it's a list.

175
00:10:12.180 --> 00:10:14.340
So you get back a native Python list.

176
00:10:15.720 --> 00:10:16.750
Okay?

177
00:10:16.750 --> 00:10:19.160
So we can do a len,
say how many did we get.

178
00:10:19.160 --> 00:10:20.988
In this case, we're gonna see two.

179
00:10:20.988 --> 00:10:24.600
And then we can loop through, using,
for and in for item and each info, so

180
00:10:24.600 --> 00:10:27.340
that means that item is gonna
loop through this one, and

181
00:10:27.340 --> 00:10:29.340
that's gonna loop through that one.

182
00:10:29.340 --> 00:10:34.200
And then item, because these
are curly braces, item is an object.

183
00:10:34.200 --> 00:10:37.214
So item['name'],
item['id'], and item['x'].

184
00:10:37.214 --> 00:10:42.534
So we're just using standard,
Python-ness of this.

185
00:10:42.534 --> 00:10:48.360
Again, super elegant.

186
00:10:48.360 --> 00:10:51.150
Okay, let me show you that one,
not that it's very exciting.

187
00:10:51.150 --> 00:10:54.441
That one's called json2.py.

188
00:10:56.344 --> 00:10:57.720
So there we are.

189
00:10:57.720 --> 00:11:02.870
We have, at the top we have the string.

190
00:11:04.160 --> 00:11:07.267
And then we parse it and print out.

191
00:11:07.267 --> 00:11:08.259
It's not working very well.

192
00:11:08.259 --> 00:11:11.605
Parse it, print it all out, and
then we loop through each one,

193
00:11:11.605 --> 00:11:15.016
which is effectively loop into that one,
and then that one, and

194
00:11:15.016 --> 00:11:19.148
printing out the pieces based on the fact
that this is a list of dictionaries.

195
00:11:26.102 --> 00:11:30.100
So python json2.py.

196
00:11:30.100 --> 00:11:31.450
Poof, extracted.

197
00:11:31.450 --> 00:11:35.850
And again, you can kinda
compare the XML and the JSON,

198
00:11:35.850 --> 00:11:37.950
cuz they're really
solving the same problem.

199
00:11:37.950 --> 00:11:42.140
But there are subtle differences
between the XML and JSON.

200
00:11:42.140 --> 00:11:45.800
And the JSON is much easier to work with.

201
00:11:45.800 --> 00:11:50.210
But the XML, if you keep looking back and
forth between the XML and the JSON, I

202
00:11:50.210 --> 00:11:54.760
think you'll agree that the XML is harder
to work with, but it's more expressive.

203
00:11:54.760 --> 00:11:56.460
And those are like two
sides of the same coin.

204
00:11:56.460 --> 00:11:59.240
So, for
the things that you can express in JSON,

205
00:11:59.240 --> 00:12:02.700
JSON is pretty much uniformly preferred.

206
00:12:02.700 --> 00:12:06.440
But, for things that are more complex,
that are hard to represent in JSON,

207
00:12:06.440 --> 00:12:08.440
it's like you're kind of
shoehorning them into JSON,

208
00:12:08.440 --> 00:12:10.480
you go like, oh XML would do a better job.

209
00:12:10.480 --> 00:12:14.220
So I think as we go forward,
we're going to see

210
00:12:14.220 --> 00:12:19.150
applications that talk to one another,
sometimes use XML, and sometimes use JSON.

211
00:12:20.610 --> 00:12:25.350
So up next we're gonna take a step
back and talk just a little bit,

212
00:12:25.350 --> 00:12:28.780
including a video, about what's called
the Service Oriented Approach, and

213
00:12:28.780 --> 00:12:33.010
that's how you build meta
applications out of little pieces

214
00:12:33.010 --> 00:12:35.960
that cooperate over APIs and web services.

215
00:12:35.960 --> 00:12:37.130
So we'll do that when we get back.