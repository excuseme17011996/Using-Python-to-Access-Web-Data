WEBVTT

1
00:00:08.712 --> 00:00:11.133
So one of the two serialization formats or

2
00:00:11.133 --> 00:00:14.480
wire formats that we're
going to talk about is XML.

3
00:00:14.480 --> 00:00:18.650
And XML stands for
Extensible Markup Language.

4
00:00:18.650 --> 00:00:21.800
And it is the older of the two formats
that we're going to talk about, and

5
00:00:21.800 --> 00:00:26.870
it's kind of the heavier weight of the two.

6
00:00:26.870 --> 00:00:29.830
Often developers, when given a choice,
would prefer the thing I'm going to tell

7
00:00:29.830 --> 00:00:32.860
you next, which is JSON, or
JavaScript Object Notation.

8
00:00:32.860 --> 00:00:36.473
But it turns out that XML has
some advantages, in particular

9
00:00:36.473 --> 00:00:41.333
when you're doing documents, representing
things that are more like documents.

10
00:00:41.333 --> 00:00:44.879
If you're just representing arrays and
stuff, then JSON tends to be better.

11
00:00:44.879 --> 00:00:48.950
So, just because XML's a little harder,
sometimes it's better.

12
00:00:48.950 --> 00:00:54.770
And so, if you look at the latest
Microsoft Word and PowerPoint formats,

13
00:00:54.770 --> 00:00:59.410
they're named pptx, well that x stands for
XML, because if you were to look in them,

14
00:00:59.410 --> 00:01:03.160
you would see that they use XML
to represent things like, oh,

15
00:01:03.160 --> 00:01:06.270
the bold, italics, and the metadata
about your stuff, or whatever.

16
00:01:06.270 --> 00:01:09.940
That's inside the .doc file or
the .ppt file,

17
00:01:09.940 --> 00:01:13.570
XML is used to represent
the shape of the document.

18
00:01:13.570 --> 00:01:16.226
And that's a good choice,
actually, to use XML to do it.

19
00:01:16.226 --> 00:01:20.250
And so, XML is

20
00:01:20.250 --> 00:01:25.170
basically a textual representation
of a tree structure of nodes.

21
00:01:25.170 --> 00:01:29.165
And, it uses less thans and greater thans.

22
00:01:29.165 --> 00:01:33.745
And so, you have a start tag like name
and /name and so less thans and

23
00:01:33.745 --> 00:01:35.565
greater thans, and that's a start tag.

24
00:01:35.565 --> 00:01:40.255
And a simple element is something that has
just a tag, some text, and another tag.

25
00:01:40.255 --> 00:01:44.935
And a complex element is a tag
that starts and ends, but

26
00:01:44.935 --> 00:01:47.765
then within it, it has other tags.

27
00:01:47.765 --> 00:01:50.310
Okay? And so a complex element is simply

28
00:01:50.310 --> 00:01:52.840
a tag that is intended
to include other tags.

29
00:01:52.840 --> 00:01:56.210
And a simple element is a tag
that simply includes text.

30
00:01:56.210 --> 00:01:59.360
And this is like a tree as
we'll talk about in a bit.

31
00:02:00.820 --> 00:02:04.840
Another bit of terminology that's
important is the start tag

32
00:02:04.840 --> 00:02:05.610
and the end tag.

33
00:02:05.610 --> 00:02:07.150
So the end tag has the slash in it.

34
00:02:08.240 --> 00:02:11.190
There's name, and a /name.

35
00:02:11.190 --> 00:02:13.190
So as you work, look at these things.

36
00:02:13.190 --> 00:02:14.320
You've got to match them up, right?

37
00:02:14.320 --> 00:02:15.650
The end to end.

38
00:02:15.650 --> 00:02:17.510
So phone and end phone.

39
00:02:17.510 --> 00:02:23.060
And then in addition, on the start tag
you have what are called attributes.

40
00:02:23.060 --> 00:02:28.310
Attributes are key-value pairs, and
it's generally, this is some key and

41
00:02:28.310 --> 00:02:30.910
then there's a value and
we enclose this in quotes.

42
00:02:30.910 --> 00:02:35.510
So type equals international, or
hide equals yes, and what do these mean?

43
00:02:35.510 --> 00:02:36.610
Well it depends, right?

44
00:02:36.610 --> 00:02:40.740
It depends on the application and
what data we are trying to represent.

45
00:02:40.740 --> 00:02:43.720
And then the last thing that we
have is a bit of a XML syntax,

46
00:02:43.720 --> 00:02:46.060
is what's called a self-closing tag.

47
00:02:46.060 --> 00:02:49.069
So sometimes all the knowledge
that you want,

48
00:02:49.069 --> 00:02:53.632
all the data you need to represent,
there is no data in between the tags.

49
00:02:53.632 --> 00:02:58.346
So you just have the start tag and
end it with a />.

50
00:02:58.346 --> 00:02:59.072
And that is,

51
00:02:59.072 --> 00:03:02.783
there is no need to have /email
at the end of this thing, okay?

52
00:03:02.783 --> 00:03:06.210
So that's called a self-closing tag.

53
00:03:06.210 --> 00:03:09.455
So this again is just some terminology.

54
00:03:09.455 --> 00:03:13.990
Start tag, end tag, textual content,
which is the stuff between two tags.

55
00:03:13.990 --> 00:03:17.169
And then attribute, which is sort of,
its metadata on it.

56
00:03:17.169 --> 00:03:20.600
So you tend to use this to describe it.

57
00:03:20.600 --> 00:03:22.690
In this particular case, I'm saying okay,

58
00:03:22.690 --> 00:03:25.180
this is an international phone number,
right?

59
00:03:25.180 --> 00:03:28.080
And it's a way to put a metadata, but

60
00:03:28.080 --> 00:03:31.790
the phone number itself is
that phone number, okay?

61
00:03:33.020 --> 00:03:34.530
So that's just some XML terminology.

62
00:03:36.590 --> 00:03:41.820
White space tends not to matter,
except sometimes in the textual area.

63
00:03:41.820 --> 00:03:44.170
And it’s generally discarded.

64
00:03:44.170 --> 00:03:47.890
And things like we indent and
all that, it’s just for readability.

65
00:03:47.890 --> 00:03:51.140
And so, these two things
are roughly equivalent.

66
00:03:51.140 --> 00:03:55.620
And some it’s all sort of pulled up,
and some it’s more indented.

67
00:03:55.620 --> 00:04:00.120
And I could draw this in many ugly ways
with no indentation and extra newlines,

68
00:04:00.120 --> 00:04:01.570
and extra white spaces.

69
00:04:01.570 --> 00:04:02.560
It doesn't matter.

70
00:04:02.560 --> 00:04:05.495
We tend not to want to look at that, and

71
00:04:05.495 --> 00:04:09.585
often we'll use what's
called a pretty printer.

72
00:04:10.921 --> 00:04:14.618
And so if you have some XML that's ugly,
you can cut and paste it and

73
00:04:14.618 --> 00:04:15.551
type in Google.

74
00:04:15.551 --> 00:04:18.709
Go to pretty print XML,
you can paste ugly-looking XML in

75
00:04:18.709 --> 00:04:21.558
that's syntactically correct and
hit the button.

76
00:04:21.558 --> 00:04:24.770
And it'll pretty print it with
all the indentation and stuff.

77
00:04:24.770 --> 00:04:28.040
Because, if you're looking
at XML that doesn't indent,

78
00:04:28.040 --> 00:04:30.360
our brains are really bad at parsing it.

79
00:04:30.360 --> 00:04:32.379
Computers don't care,
but our brains do care.

80
00:04:32.379 --> 00:04:36.649
So we tend to pretty print stuff and
all the stuff that I put in the slides,

81
00:04:36.649 --> 00:04:38.826
I kind of make it reasonably pretty

82
00:04:38.826 --> 00:04:42.560
so that I can look at it and know,
oh yeah, yeah this is the beginning and

83
00:04:42.560 --> 00:04:46.080
that's the end without it just
being all gibberish and pulled up.

84
00:04:46.080 --> 00:04:48.960
So white space technically doesn't matter,

85
00:04:48.960 --> 00:04:52.790
but as we show each other XML we
tend to make it look really pretty.

86
00:04:52.790 --> 00:04:55.340
So here's just a little bit of XML.

87
00:04:55.340 --> 00:05:00.940
And so this is a recipe, and
there's a title for the recipe.

88
00:05:00.940 --> 00:05:04.500
There is some attributes for it.

89
00:05:04.500 --> 00:05:07.400
There's each ingredient
has some attributes.

90
00:05:07.400 --> 00:05:09.530
Then it has the name of the ingredient.

91
00:05:09.530 --> 00:05:10.860
Things can be in order.

92
00:05:11.910 --> 00:05:13.678
We can have tags within tags.

93
00:05:13.678 --> 00:05:16.170
Here's a multi-step thing.

94
00:05:16.170 --> 00:05:17.910
So you get to name these things, right?

95
00:05:17.910 --> 00:05:19.020
In HTML you don't get to.

96
00:05:19.020 --> 00:05:24.530
You know, a paragraph is a p tag,
and a header one is h1 tag.

97
00:05:24.530 --> 00:05:29.300
In XML you make them up and you use them
to describe actually something meaningful.

98
00:05:29.300 --> 00:05:33.599
And these attributes like in HTML,
a href equals.

99
00:05:36.140 --> 00:05:37.460
Right.
Somebody made this up.

100
00:05:37.460 --> 00:05:40.670
Somebody told you that's how it is, and
that's what you got to do to make HTML.

101
00:05:40.670 --> 00:05:44.030
But here, name equals prep_time,
cook_time.

102
00:05:44.030 --> 00:05:46.840
This all has to do with
the application that's going to

103
00:05:46.840 --> 00:05:48.740
create and/or use this data.

104
00:05:48.740 --> 00:05:50.870
And so we create XML formats

105
00:05:50.870 --> 00:05:52.890
based on what's most useful to us.

106
00:05:52.890 --> 00:05:58.770
And this is how XML is so much more
useful to an application than, say, HTML.

107
00:05:58.770 --> 00:06:01.330
Even though HTML is crude and effective,

108
00:06:01.330 --> 00:06:06.060
and we can get stuff using HTML,
but it's so easy to break it.

109
00:06:06.060 --> 00:06:08.660
But now we're in XML, and
it's pretty and it's elegant.

110
00:06:09.750 --> 00:06:11.630
So I've already hit on these terminology.

111
00:06:11.630 --> 00:06:13.420
Tags are the beginning and ends.

112
00:06:13.420 --> 00:06:16.140
These key-value pairs are attributes.

113
00:06:16.140 --> 00:06:19.696
And serializing is the act of taking
an internal data structure in some

114
00:06:19.696 --> 00:06:22.307
programming language and
converting it to XML.

115
00:06:22.307 --> 00:06:24.397
De-serializing is reading XML and

116
00:06:24.397 --> 00:06:28.792
then converting it into some structure
inside the programming language

117
00:06:28.792 --> 00:06:31.960
so we can actually look at the data
inside of that programming language.

118
00:06:33.410 --> 00:06:36.850
Now when we start thinking about XML,
maybe we're designing XML or

119
00:06:36.850 --> 00:06:39.520
maybe we're reading somebody else's XML.

120
00:06:39.520 --> 00:06:43.600
As I mentioned at the beginning, XML is
really a textual representation as a tree.

121
00:06:43.600 --> 00:06:48.140
And that's why we see it tend to indent,
you know, to capture the nesting.

122
00:06:49.500 --> 00:06:53.150
But you can also kind of look at
this as a tree, and that is that

123
00:06:53.150 --> 00:07:00.060
the a tag here has two child tags,
the b tag and the c tag.

124
00:07:00.060 --> 00:07:04.680
Those are the tags that are sort
of one level down from the root,

125
00:07:04.680 --> 00:07:06.220
which is the a tag.

126
00:07:06.220 --> 00:07:09.710
And then if you look in the c tag
there's the d tag and the e tag.

127
00:07:09.710 --> 00:07:10.720
And so those are the children.

128
00:07:10.720 --> 00:07:14.090
So you can think of these as the parent,
and these are the child.

129
00:07:15.680 --> 00:07:19.400
And then this, of course, becomes the
parent and this is the child, right?

130
00:07:21.200 --> 00:07:25.860
And so it really is often very,
very helpful to think of this as a tree.

131
00:07:25.860 --> 00:07:28.610
And when we write code that's
looking through it, sometimes

132
00:07:28.610 --> 00:07:31.540
we'll actually drive down the tree
and back up the tree and

133
00:07:31.540 --> 00:07:34.060
down this tree and back up,
and down, and back up.

134
00:07:34.060 --> 00:07:39.540
As a way to, in effect, visit
all of the nodes in the tree, okay?

135
00:07:39.540 --> 00:07:42.850
So that's one way to, when you see this,

136
00:07:44.060 --> 00:07:46.670
mentally you should be able
to construct this tree.

137
00:07:48.000 --> 00:07:51.970
The attributes and the text itself
are kind of like a child of the node.

138
00:07:51.970 --> 00:07:54.860
So if we take a look at
this little bit of XML, and

139
00:07:54.860 --> 00:07:58.350
we have the b tag and the end b tag and
then there is the text bit.

140
00:07:58.350 --> 00:08:02.130
You can think of the text node itself,
the X,

141
00:08:02.130 --> 00:08:04.780
which is the text body part of that node.

142
00:08:04.780 --> 00:08:10.160
That's a child of the b node, but
another child is this attribute w.

143
00:08:10.160 --> 00:08:13.150
And there might be many attributes.

144
00:08:13.150 --> 00:08:15.820
In the text node,
there tends to be only one text node.

145
00:08:15.820 --> 00:08:18.850
There's a text node and
then many attribute nodes, depending.

146
00:08:18.850 --> 00:08:22.020
And that's kind of how we
mentally think of and

147
00:08:22.020 --> 00:08:26.740
model the attributes and nodes,
and the text within nodes.

148
00:08:26.740 --> 00:08:28.810
You can also think, and
it's totally equivalent,

149
00:08:28.810 --> 00:08:32.560
to think of these things as having paths.

150
00:08:32.560 --> 00:08:35.790
And it's kind of like folders
within folders within folders.

151
00:08:35.790 --> 00:08:40.165
And then we concatenate sort of
the whole path down using slashes

152
00:08:40.165 --> 00:08:42.604
typically to represent each step.

153
00:08:42.604 --> 00:08:49.248
So / means the very top,
/a means this stuff,

154
00:08:49.248 --> 00:08:53.738
and then /a/b means this thing.

155
00:08:53.738 --> 00:08:58.539
And so if you were to ask what is at /a/b?

156
00:08:59.790 --> 00:09:02.870
You would say, oh well I go to a then
I go to b, and what have I found?

157
00:09:02.870 --> 00:09:06.439
Well I have found X,
and so that's why /a/b.

158
00:09:06.439 --> 00:09:10.694
The other path is /a/c/d,
well what's there?

159
00:09:10.694 --> 00:09:12.494
That's Y, okay?

160
00:09:12.494 --> 00:09:15.990
And so you can think of these things
as what's the parent, what's the child?

161
00:09:15.990 --> 00:09:20.898
Or you can sort of think of these
as sort of fully realized a, c, e

162
00:09:20.898 --> 00:09:23.863
paths, which is the path to Z, okay?

163
00:09:23.863 --> 00:09:29.750
All these are equivalent,
they're just all good ways to visualize,

164
00:09:29.750 --> 00:09:32.460
in your mind, as a programmer.

165
00:09:32.460 --> 00:09:35.619
Because what you're going to do as a
programmer is you're going to dig down and

166
00:09:35.619 --> 00:09:36.660
find this Y thing.

167
00:09:36.660 --> 00:09:40.840
And all these are way too simple, but you
kind of have to dig down and go down one,

168
00:09:40.840 --> 00:09:42.240
down two, down three.

169
00:09:42.240 --> 00:09:44.610
Oh, and then you go to the fourth one,
and then grab this other thing.

170
00:09:44.610 --> 00:09:48.417
And that's how you pull out a header
of a document or something. Okay?

171
00:09:49.570 --> 00:09:53.070
And somebody will tell us what
this XML is supposed to look like.

172
00:09:55.240 --> 00:09:57.360
So that's XML itself,

173
00:09:57.360 --> 00:10:03.280
But in order to make life better between
two applications, we need a contract.

174
00:10:03.280 --> 00:10:06.920
And a contract as to what is valid and
not valid XML, so

175
00:10:06.920 --> 00:10:08.650
that two applications don't have to argue.

176
00:10:08.650 --> 00:10:10.330
So that's what we'll talk about next.