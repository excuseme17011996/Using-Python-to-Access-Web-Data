WEBVTT

1
00:00:08.806 --> 00:00:12.908
So, now what we're going to do is we're going to
take this concept that takes all those

2
00:00:12.908 --> 00:00:15.523
low-level routers and
Ethernet and fiber optic and

3
00:00:15.523 --> 00:00:19.050
simplifies all that down to
this one thing called a socket.

4
00:00:19.050 --> 00:00:22.900
We make a socket and then we connect
the socket to a far end application.

5
00:00:22.900 --> 00:00:26.960
But, then the problem is what do
we do to talk to that application?

6
00:00:26.960 --> 00:00:31.762
And so we just got done talking about
how the Transport Layer

7
00:00:31.762 --> 00:00:32.272
talks back and forth.

8
00:00:32.272 --> 00:00:35.095
And we can open this connection
between our application,

9
00:00:35.095 --> 00:00:39.310
remember that this side is our computer
and this side is the server computer.

10
00:00:39.310 --> 00:00:43.750
And we're going to pretend that all
this complexity doesn't exist and

11
00:00:43.750 --> 00:00:45.910
we've made a socket connection.

12
00:00:45.910 --> 00:00:47.890
And that is what we just
got done talking about.

13
00:00:47.890 --> 00:00:52.630
But, then the question becomes, what we're
really interested in is not actually

14
00:00:52.630 --> 00:00:57.660
just making sockets, but
doing something useful like web browsing.

15
00:00:57.660 --> 00:01:00.010
Web browsing to a web server.

16
00:01:00.010 --> 00:01:02.470
And then the question is, now that we
have a connection, what do we say?

17
00:01:02.470 --> 00:01:06.820
That's really what this is, our next
problem to solve is, what do we say?

18
00:01:08.370 --> 00:01:12.430
So, the most common protocol that we run
across these days is a protocol called

19
00:01:12.430 --> 00:01:17.030
HTTP, which stands for
Hypertext Transport Layer Protocol.

20
00:01:17.030 --> 00:01:19.610
And it's really the most dominant
application layer protocol

21
00:01:19.610 --> 00:01:20.580
on the Internet.

22
00:01:20.580 --> 00:01:22.630
It is how we retrieve HTML documents.

23
00:01:22.630 --> 00:01:26.480
But, it also does web
services like API stuff.

24
00:01:26.480 --> 00:01:28.660
It can talk to those things as well.

25
00:01:28.660 --> 00:01:32.320
And part of its success is its simplicity.

26
00:01:32.320 --> 00:01:35.730
It's so simple that I can explain
it to you in like 20 minutes, and

27
00:01:35.730 --> 00:01:39.870
you can actually hack it
yourself within 20 minutes.

28
00:01:39.870 --> 00:01:43.870
So, we take this socket, this ability
to call, and you basically say,

29
00:01:43.870 --> 00:01:46.840
I'm going to make a connection and
I'm going to ask for a document, and

30
00:01:46.840 --> 00:01:48.930
then wait, and you'll send me
the document, and we'll disconnect.

31
00:01:48.930 --> 00:01:54.850
So, it's a very simple protocol that
has a whole ton of subtlety to it,

32
00:01:54.850 --> 00:01:57.270
but at its core, it's very simple.

33
00:01:57.270 --> 00:02:00.170
And that means we can use it
to do lots and lots of things.

34
00:02:01.610 --> 00:02:05.510
And it's just the set of
rules that tell browsers

35
00:02:05.510 --> 00:02:08.940
what they are supposed to talk
when they're talking to servers.

36
00:02:08.940 --> 00:02:10.910
What are they supposed to say?

37
00:02:10.910 --> 00:02:15.340
Who talks first is one of the biggest
questions of one of these protocols.

38
00:02:15.340 --> 00:02:18.020
So, a protocol is just a set
of rules of the road, right?

39
00:02:18.020 --> 00:02:20.010
Do we drive on the right
side of the road or do we

40
00:02:20.010 --> 00:02:21.460
drive on the left side of the road?

41
00:02:21.460 --> 00:02:25.120
In driving and in protocols it kind of
doesn't matter, as long as we agree.

42
00:02:26.150 --> 00:02:28.020
Just so
that we don't bump into each other.

43
00:02:28.020 --> 00:02:32.080
And like I said, one of the first things
that you've got to figure out in a protocol

44
00:02:32.080 --> 00:02:35.160
is, who's going to wait for the other talk,
and who's going to talk first.

45
00:02:35.160 --> 00:02:39.630
If they're both waiting for the other
person to talk, then nothing good happens,

46
00:02:39.630 --> 00:02:41.700
and you can't get started,
so you have to start.

47
00:02:43.060 --> 00:02:45.730
So, if you look at HTML, and

48
00:02:45.730 --> 00:02:49.450
we look at sort of what our web browser
has in its location bar, who knows,

49
00:02:49.450 --> 00:02:52.540
some day in the future they won't
even show us location bars.

50
00:02:52.540 --> 00:02:57.200
But this is what's called a URL,
or a Uniform Resource Locator.

51
00:02:57.200 --> 00:03:00.839
And if you watch the video that
I have of Robert Cailliau,

52
00:03:00.839 --> 00:03:05.040
you will see that he says, and
I agree, that one

53
00:03:05.040 --> 00:03:09.890
of the critical things that the Web did
was created the Uniform Resource Locator.

54
00:03:09.890 --> 00:03:15.810
And the Uniform Resource Locator,
it's a simple concept but before that,

55
00:03:15.810 --> 00:03:21.100
we had to know what kind of host to talk to,
what kind of service to talk to,

56
00:03:21.100 --> 00:03:23.300
and what kind of application protocol,
and what kind of document.

57
00:03:23.300 --> 00:03:28.310
And so, if you take a look at your
typical URL like this YouTube URL,

58
00:03:28.310 --> 00:03:31.650
it's broken into what protocol are we
going to use to talk to the server,

59
00:03:31.650 --> 00:03:34.220
this is the Hypertext Transport Protocol,

60
00:03:34.220 --> 00:03:38.880
what host are we going to talk to, and
then what document are we going to get.

61
00:03:38.880 --> 00:03:41.620
So we're going to connect to this host, and

62
00:03:41.620 --> 00:03:46.240
use the HTTP protocol to
request this document, okay?

63
00:03:46.240 --> 00:03:48.140
And you could see the same thing.

64
00:03:48.140 --> 00:03:52.950
We're going to talk to host name
youtube.com and this is the document

65
00:03:52.950 --> 00:03:57.530
that we are asking to get, okay?
And so that's how these URLs work.

66
00:03:57.530 --> 00:04:03.230
They have a protocol, a host, and
a document. And again, a simple concept but

67
00:04:03.230 --> 00:04:06.490
as long as everyone does the same
thing, things work out quite well.

68
00:04:06.490 --> 00:04:07.650
If you looked at specs for

69
00:04:07.650 --> 00:04:10.639
the URL they are actually somewhat
complex. but in the basic thing.

70
00:04:11.820 --> 00:04:16.020
So if we think about the act
of surfing on the Web,

71
00:04:16.020 --> 00:04:19.690
you've got some page that you're looking
at and then you've got these little hot

72
00:04:19.690 --> 00:04:24.070
links on that page, and you click
something and then you get a new page.

73
00:04:24.070 --> 00:04:26.680
This is what we call
the request-response cycle.

74
00:04:28.060 --> 00:04:30.390
So, let me show you that in a web browser.

75
00:04:30.390 --> 00:04:33.220
Okay?
So, let's find myself my web browser.

76
00:04:34.070 --> 00:04:35.210
Okay.

77
00:04:35.210 --> 00:04:37.770
Here's a happy little web page, right?

78
00:04:37.770 --> 00:04:41.758
Here's a URL doctorchuck.com/page1.htm.

79
00:04:41.758 --> 00:04:44.730
And so it's a rather nondescript webpage.

80
00:04:44.730 --> 00:04:47.340
The only thing that you can
do is go to a different page.

81
00:04:47.340 --> 00:04:52.740
So, right now this web browser's not
talking to any web server at all.

82
00:04:52.740 --> 00:04:55.165
And at some point I hover
over this little link.

83
00:04:55.165 --> 00:05:00.595
And I say, oh, I would like to get this
other page and so I click the button and

84
00:05:00.595 --> 00:05:04.665
when I click the button, that tells the
browser to go retrieve a different page.

85
00:05:04.665 --> 00:05:08.727
And if you look down here in
the lower tiny left hand corner,

86
00:05:08.727 --> 00:05:11.173
down here, let me go back to it now.

87
00:05:16.577 --> 00:05:20.180
If you hover down there in the corner,

88
00:05:20.180 --> 00:05:24.700
you can see which page it's going to
go to. Okay?

89
00:05:24.700 --> 00:05:31.480
So when I click, the browser says, oh,
the user, me, needs a different page.

90
00:05:31.480 --> 00:05:36.390
So it then makes a socket connection and
retrieves that page and shows the page.

91
00:05:36.390 --> 00:05:39.620
Now, this is all happening
the moment I press click.

92
00:05:42.120 --> 00:05:43.900
Okay, that's a different page.

93
00:05:43.900 --> 00:05:47.811
Now I can, reading my page,
I'm going to click on something else and

94
00:05:47.811 --> 00:05:50.070
it's going to go somewhere else, okay.

95
00:05:50.070 --> 00:05:53.486
So, that's called
the request-response cycle,

96
00:05:53.486 --> 00:05:57.145
because at the moment you click,
it makes a request,

97
00:05:57.145 --> 00:06:02.371
the other page that it gets is
the response. The request-response cycle.

98
00:06:02.371 --> 00:06:06.410
Okay, so request-response cycle,
you are asking for a new document.

99
00:06:07.640 --> 00:06:08.810
So this is how it works, all right.

100
00:06:08.810 --> 00:06:11.230
You're going to hover over
top of that first link.

101
00:06:11.230 --> 00:06:16.080
You click on the link, that click is
an event that goes to a piece of software

102
00:06:16.080 --> 00:06:18.490
running on your computer
called the browser.

103
00:06:18.490 --> 00:06:24.740
Could be Chrome or Mozilla or
whatever, Firefox.

104
00:06:24.740 --> 00:06:27.902
And then the browser makes a network
connection to the web server,

105
00:06:27.902 --> 00:06:30.400
the web server's a different computer.

106
00:06:30.400 --> 00:06:31.830
And it makes a connection on port 80,

107
00:06:31.830 --> 00:06:34.660
because it's like we're
going to talk to the Web, and

108
00:06:34.660 --> 00:06:39.760
then it sends the application request for
a document, and that's the GET request.

109
00:06:39.760 --> 00:06:43.124
It sends this GET request, the web server
goes la la la la da la, and

110
00:06:43.124 --> 00:06:47.724
does all these other things, and then it
sends us back a page that might have come

111
00:06:47.724 --> 00:06:50.760
off of a disk drive,
it might have come off of a database.

112
00:06:50.760 --> 00:06:52.265
Who knows how it made that.

113
00:06:52.265 --> 00:06:55.890
And it sends us back some HTML with
less thans and greater thans.

114
00:06:55.890 --> 00:07:00.360
And the browser receives that
back as the information and

115
00:07:00.360 --> 00:07:02.780
then shows it and formats it. Okay?

116
00:07:02.780 --> 00:07:06.560
And so this is the
request-response cycle.

117
00:07:06.560 --> 00:07:10.072
This side is the request and
this side is the response.

118
00:07:10.072 --> 00:07:15.750
And then every time you click, it kind
of goes and gets retrieves, displays.

119
00:07:15.750 --> 00:07:17.520
Get, retrieve, display.

120
00:07:17.560 --> 00:07:18.920
Get, retrieve, display.

121
00:07:18.920 --> 00:07:20.640
Request-response cycle.

122
00:07:21.800 --> 00:07:26.330
And that's what your browser does over and
over and over again.

123
00:07:26.330 --> 00:07:29.850
Now if you wanted to write a browser,
you could go find the standard,

124
00:07:29.850 --> 00:07:34.090
the standard that would talk
about how to send this data.

125
00:07:34.090 --> 00:07:36.780
These standards are often developed
by an organization called

126
00:07:36.780 --> 00:07:39.070
the Internet Engineering Task Force,
or IETF,

127
00:07:39.070 --> 00:07:41.650
and they're often called Request for
Comments.

128
00:07:43.240 --> 00:07:46.160
It's kind of ironic to name
a standard that we've been using for

129
00:07:46.160 --> 00:07:51.010
years and years an RFC, or Request for
Comments, but that's an irony

130
00:07:51.010 --> 00:07:55.690
on purpose that basically is saying none
of these Internet protocols are so

131
00:07:55.690 --> 00:07:58.420
set in stone that we could
never imagine changing them.

132
00:07:58.420 --> 00:08:00.890
So these things, even though
some of them are many years old,

133
00:08:00.890 --> 00:08:04.510
this particular one that I'm
looking at is the IP layer.

134
00:08:04.510 --> 00:08:06.870
Right? And it's September 1981.

135
00:08:06.870 --> 00:08:08.770
Now, a lot of things have changed.

136
00:08:08.770 --> 00:08:10.850
And that's why they call them Request for
Comments.

137
00:08:10.850 --> 00:08:13.204
And so you can see these,
they're all open standards,

138
00:08:13.204 --> 00:08:14.719
there's no charge to look at them.

139
00:08:14.719 --> 00:08:19.026
And you can go read the standard for IP,
and you can go read the standard for TCP,

140
00:08:19.026 --> 00:08:22.450
and HTTP, and all these things,
if you really want to read it.

141
00:08:23.680 --> 00:08:26.940
So, if we were to look
at one of the protocols,

142
00:08:26.940 --> 00:08:29.310
this might even be obsolete by now.

143
00:08:29.310 --> 00:08:33.258
Above this Hypertext Transport Protocol,
the HTTP.

144
00:08:33.258 --> 00:08:35.360
And then we could read through it.

145
00:08:35.360 --> 00:08:39.420
And it's hundreds of pages long, and if we
read down farther and farther and farther,

146
00:08:39.420 --> 00:08:41.210
and you read far enough,

147
00:08:41.210 --> 00:08:45.970
it would say, if you are a client like
a browser that wants to send to a web

148
00:08:45.970 --> 00:08:50.130
server, what is the syntax of that, right?

149
00:08:50.130 --> 00:08:54.420
And so it basically tells you what
the thing is supposed to look like,

150
00:08:54.420 --> 00:08:56.610
you read a little farther,
read a little farther.

151
00:08:56.610 --> 00:09:02.890
And what it will tell you is that, you're
supposed to send a first three characters

152
00:09:02.890 --> 00:09:07.910
are capital G, capital E, capital T, followed by a space,
followed by the page you're interested in.

153
00:09:07.910 --> 00:09:11.700
And there's a little bit about which
protocol version you want to use.

154
00:09:11.700 --> 00:09:17.330
And so if you look at what goes on
underneath, this is how it works and

155
00:09:17.330 --> 00:09:22.810
if you have the right software running on
your system, you can hack HTTP as well.

156
00:09:22.810 --> 00:09:26.150
And so it's such an easy
protocol that we can fake it.

157
00:09:26.150 --> 00:09:30.650
And Telnet is a command
that was originally used to

158
00:09:30.650 --> 00:09:35.060
log in to other computers but
because it's unencrypted, it

159
00:09:35.060 --> 00:09:39.850
generally is not used to do login anymore
cause we want to use a secure login.

160
00:09:39.850 --> 00:09:43.460
But, some computers,
I'm using a Macintosh, Linux has it.

161
00:09:43.460 --> 00:09:46.252
You may be able to download a Telnet for
Windows.

162
00:09:46.252 --> 00:09:48.689
I don't know,
you'd probably google Telnet for Windows.

163
00:09:50.110 --> 00:09:52.820
But basically, this is a command line.

164
00:09:52.820 --> 00:09:56.220
And I'm going to use this to
hand talk the protocol.

165
00:09:56.220 --> 00:09:58.060
So, let me show you how this works.

166
00:09:59.300 --> 00:10:01.740
Okay, here I am in the command line.

167
00:10:01.740 --> 00:10:07.210
And so I am going to use the Telnet
command, which is not a web protocol.

168
00:10:07.210 --> 00:10:09.060
Telnet simply makes a connection and

169
00:10:09.060 --> 00:10:13.570
then sends whatever characters I type
with the keyboard across that socket.

170
00:10:13.570 --> 00:10:19.854
So I could say Telnet www.dr-chuck.com.

171
00:10:19.854 --> 00:10:22.040
And I'm telling it that I
want to connect to port 80.

172
00:10:22.040 --> 00:10:25.880
So, I told you that port 80 was the port
that we use to talk to web browsers.

173
00:10:27.130 --> 00:10:30.470
So, now it's opening a socket and
connecting to port 80,

174
00:10:30.470 --> 00:10:34.580
which I showed you a little while back how
to do this exact same thing in Python.

175
00:10:34.580 --> 00:10:38.060
And now what's happening is
it's waiting for me to talk.

176
00:10:38.060 --> 00:10:42.624
I might say HELLO THERE,

177
00:10:42.624 --> 00:10:46.200
and I'm not talking the right protocol.

178
00:10:47.460 --> 00:10:49.790
I said this, I typed this HELLO THERE.

179
00:10:49.790 --> 00:10:53.020
And it blew up, and
it's saying Bad Request.

180
00:10:53.020 --> 00:10:55.210
Your browser sent a request
the server could not understand.

181
00:10:55.210 --> 00:10:58.693
Additionally, a 404 was not found,
bla bla bla bla bla bla bla. Okay.

182
00:10:58.693 --> 00:11:03.144
So, that is something, you will not see
this if you use a browser because your

183
00:11:03.144 --> 00:11:06.435
browser won't be dumb enough to say
hello there.

184
00:11:06.435 --> 00:11:07.990
Because if you read the specification,

185
00:11:07.990 --> 00:11:10.715
we know that the first thing
you're supposed to type is GET.

186
00:11:10.715 --> 00:11:11.773
So, let me try this again.

187
00:11:11.773 --> 00:11:14.850
I'm going to again,
make a Telnet to that web server.

188
00:11:14.850 --> 00:11:18.190
The web server got a request,
it was just a badly formed request.

189
00:11:18.190 --> 00:11:19.840
And this time I'm going to do it right.

190
00:11:19.840 --> 00:11:25.031
I'm going to type capital G,
capital E, capital T, GET,

191
00:11:25.031 --> 00:11:29.256
and then the page I'm looking for,

192
00:11:29.256 --> 00:11:34.595
http://www.dr-chuck.com/page1.htm.

193
00:11:34.595 --> 00:11:38.950
I have to tell which protocol I want to use,
HTTP/1.0.

194
00:11:38.950 --> 00:11:40.970
And you also see the IP address.

195
00:11:40.970 --> 00:11:42.880
Oh, I was too slow.

196
00:11:42.880 --> 00:11:44.140
I was too slow.

197
00:11:44.140 --> 00:11:45.010
It was mad.

198
00:11:45.010 --> 00:11:46.350
Okay, I'll do it faster next time.

199
00:11:46.350 --> 00:11:49.120
I'll just point out that
this is the IP address.

200
00:11:49.120 --> 00:11:51.910
The domain name is www.dr-chuck.com.

201
00:11:51.910 --> 00:11:55.920
But the actual, like, low-level phone
number of dr-chuck.com, at least for

202
00:11:55.920 --> 00:12:01.390
today, it could change, is 198.251.66.43,
and then within that server we're

203
00:12:01.390 --> 00:12:06.900
talking to port 80 and
that's how we talk to the web server.

204
00:12:06.900 --> 00:12:09.330
Okay, I'm going to put this
little string in my cut and

205
00:12:09.330 --> 00:12:13.870
paste buffer so that I can type it faster,
so it doesn't blow up on me.

206
00:12:13.870 --> 00:12:14.490
Okay, that's bad.

207
00:12:15.580 --> 00:12:16.230
I need to type it.

208
00:12:16.230 --> 00:12:19.529
So, now I'm going to make my connection again
and I won't be so talkative this time.

209
00:12:20.770 --> 00:12:24.780
Now I type really fast GET, and
then I'll hit Enter and I hit Enter again.

210
00:12:25.780 --> 00:12:31.890
And now I have talked properly to this
web server and it's given me good stuff.

211
00:12:31.890 --> 00:12:33.070
I typed this blank line.

212
00:12:33.070 --> 00:12:36.140
So, you have to type GET and then you
have to type one Enter twice, basically.

213
00:12:36.140 --> 00:12:37.780
And that's part of the protocol.

214
00:12:37.780 --> 00:12:39.740
You have to type GET and Enter twice.

215
00:12:39.740 --> 00:12:43.691
And then it gives me a set of headers,
which are metadata about this document.

216
00:12:43.691 --> 00:12:47.807
And it says when we're doing this,
and what server I'm talking to, and

217
00:12:47.807 --> 00:12:49.910
how much data I'm going to get back.

218
00:12:49.910 --> 00:12:52.240
I get 131 characters back.

219
00:12:52.240 --> 00:12:53.890
And then it gives me a blank line.

220
00:12:53.890 --> 00:12:55.680
Again, part of the HTTP protocol.

221
00:12:55.680 --> 00:12:58.219
And then it gives me the actual
content of the document I asked for.

222
00:12:59.440 --> 00:13:02.400
The first page,
that's the HTML for that page.

223
00:13:02.400 --> 00:13:03.780
And then it closes the connection.

224
00:13:03.780 --> 00:13:07.583
I mentioned it opens a connection,
sends a get request, retrieves the data,

225
00:13:07.583 --> 00:13:09.440
and the connection gets closed.

226
00:13:09.440 --> 00:13:13.860
This is why the HTTP protocol is so
delightfully simple, okay?

227
00:13:15.120 --> 00:13:18.800
So, we just hacked into a web server.

228
00:13:18.800 --> 00:13:20.470
And you can try to do
it in any web server.

229
00:13:20.470 --> 00:13:25.288
You'll notice as this one did if you type
too slow you must not really be a browser

230
00:13:25.288 --> 00:13:27.041
you're running too slow. Boot.

231
00:13:27.041 --> 00:13:32.273
So, they do attempt to defend themselves
sometimes from you doing things and

232
00:13:32.273 --> 00:13:34.212
just typing them randomly.

233
00:13:34.212 --> 00:13:36.694
And if you talk in the secure protocols,

234
00:13:36.694 --> 00:13:41.588
I can't hack the secure protocols nearly
as easily as the insecure protocols.

235
00:13:41.588 --> 00:13:43.670
Okay, so back to our talk.

236
00:13:43.670 --> 00:13:45.620
So, that's it.

237
00:13:45.620 --> 00:13:50.420
That's the request-response cycle, done
by hand, with no web browser whatsoever.

238
00:13:51.660 --> 00:13:56.860
Now interestingly, part of my obsession
with the command line is that in the real

239
00:13:56.860 --> 00:14:00.740
world, most hacking is done by people
who are very skilled with command line.

240
00:14:00.740 --> 00:14:05.820
And you can see an interesting scene that
one of my former students helped write

241
00:14:05.820 --> 00:14:09.165
in the Matrix Reloaded,
where they're actually doing hacking and

242
00:14:09.165 --> 00:14:10.910
they're doing it right
in the command line.

243
00:14:10.910 --> 00:14:16.425
And this use of a very
accurate hacking scene is now

244
00:14:16.425 --> 00:14:19.670
lots of movies now do
accurate hacking instead.

245
00:14:19.670 --> 00:14:24.020
Now, this request-response cycle
when you grab a whole page,

246
00:14:24.020 --> 00:14:26.060
it actually does it many, many times.

247
00:14:26.060 --> 00:14:29.980
And so the original HTML comes back and

248
00:14:29.980 --> 00:14:35.160
then CSS comes back, and there is a way in
most browsers to turn on developer mode.

249
00:14:35.160 --> 00:14:38.030
So let me just show you how
that works in a second.

250
00:14:38.030 --> 00:14:45.380
So, let's go to www.pythonlearn.com.

251
00:14:45.380 --> 00:14:48.890
So there's a page, it's got a lot of stuff
on it, it's got some images, got these,

252
00:14:48.890 --> 00:14:50.190
that, and the other thing.

253
00:14:50.190 --> 00:14:54.500
And I'm going to show you what happens
when you retrieve this page, but

254
00:14:54.500 --> 00:14:57.550
instead watch developer mode.

255
00:14:57.550 --> 00:15:02.662
View > Developer > Console, and
I am going to turn on the network.

256
00:15:02.662 --> 00:15:04.775
So, let me make this a little bigger so
you can see it better.

257
00:15:12.903 --> 00:15:16.080
So, this is a debugger that
most of you could turn on, and

258
00:15:16.080 --> 00:15:20.070
I'm going to actually look at the network,
and I'll clear this all out.

259
00:15:20.070 --> 00:15:21.490
So, I'm going to refresh this page,

260
00:15:21.490 --> 00:15:26.320
and you're going to see that it's making
many request-response cycles, right?

261
00:15:26.320 --> 00:15:30.322
So, it actually pulled in the very
first page, which is the HTML for

262
00:15:30.322 --> 00:15:34.903
the page, then it pulled in CSS and then
it just kept doing more and more things.

263
00:15:38.316 --> 00:15:41.380
To the point where it took
a total of 20 requests.

264
00:15:41.380 --> 00:15:45.380
So, it's more complex than
the single request-response cycle,

265
00:15:45.380 --> 00:15:48.750
but each of these things
are another request-response cycle.

266
00:15:48.750 --> 00:15:52.500
And you'll notice that sometimes
your browser will spin or

267
00:15:52.500 --> 00:15:55.430
something while you're waiting for
a page to load, and

268
00:15:55.430 --> 00:15:58.010
that's because it's got to go request,
response, request, response.

269
00:15:58.010 --> 00:16:03.240
Oh, and I got to get this image file,
and this CSS file, etc., etc., etc.

270
00:16:03.240 --> 00:16:09.420
But they're all based on a request-response
cycle, which is that GET request.

271
00:16:09.420 --> 00:16:14.290
So, that is the application protocol for
HTTP.

272
00:16:14.290 --> 00:16:18.660
Open a socket, send a GET,
send a new line, get back the document,

273
00:16:18.660 --> 00:16:21.485
display the document, and
do that over and over again.

274
00:16:21.485 --> 00:16:26.080
So, whenever I tell you
about application protocols,

275
00:16:26.080 --> 00:16:28.730
it's always more complex
than actually using it.

276
00:16:28.730 --> 00:16:29.370
Okay?

277
00:16:29.370 --> 00:16:32.770
So, up next we're going to do something
a little easier than understanding

278
00:16:32.770 --> 00:16:36.470
application protocols and instead let's
just use an application protocol.